# Generated by cosmoctl template command
apiVersion: cosmo.cosmo-workspace.github.io/v1alpha1
kind: Template
metadata:
  annotations:
    cosmo/ws-deployment: code-server
    cosmo/ws-network-type: LoadBalancer
    cosmo/ws-service: code-server
    cosmo/ws-service-main-port: http
    cosmo/ws-urlbase: http://{{LOAD_BALANCER}}:{{PORT_NUMBER}}
  creationTimestamp: null
  labels:
    cosmo/type: workspace
  name: code-server-loadbalancer-no-storage
spec:
  requiredVars:
  - var: COSMO_AUTH_PROXY_IMAGE
    default: ghcr.io/cosmo-workspace/cosmo-auth-proxy:v0.17.0
  rawYaml: |
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        app.kubernetes.io/instance: code-server
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: code-server
        cosmo/instance: '{{INSTANCE}}'
        cosmo/template: '{{TEMPLATE}}'
        helm.sh/chart: code-server-1.0.5
      name: '{{INSTANCE}}-code-server'
      namespace: '{{NAMESPACE}}'
    spec:
      ports:
      - name: http
        port: 7777
        protocol: TCP
        targetPort: http
      selector:
        app.kubernetes.io/instance: code-server
        app.kubernetes.io/name: code-server
        cosmo/instance: '{{INSTANCE}}'
        cosmo/template: '{{TEMPLATE}}'
      type: LoadBalancer
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app.kubernetes.io/instance: code-server
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: code-server
        cosmo/instance: '{{INSTANCE}}'
        cosmo/template: '{{TEMPLATE}}'
        helm.sh/chart: code-server-1.0.5
      name: '{{INSTANCE}}-code-server'
      namespace: '{{NAMESPACE}}'
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/instance: code-server
          app.kubernetes.io/name: code-server
          cosmo/instance: '{{INSTANCE}}'
          cosmo/template: '{{TEMPLATE}}'
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            app.kubernetes.io/instance: code-server
            app.kubernetes.io/name: code-server
            cosmo/instance: '{{INSTANCE}}'
            cosmo/template: '{{TEMPLATE}}'
        spec:
          containers:
          - args:
            - --insecure
            env:
            - name: COSMO_AUTH_PROXY_INSTANCE
              value: '{{INSTANCE}}'
            - name: COSMO_AUTH_PROXY_NAMESPACE
              value: '{{NAMESPACE}}'
            - name: COSMO_AUTH_PROXY_SERVICE_NAME
              value: '{{WORKSPACE_SERVICE_NAME}}'
            image: '{{COSMO_AUTH_PROXY_IMAGE}}'
            name: cosmo-auth-proxy
          - args:
            - --auth=none
            - --port=7777
            image: codercom/code-server:3.12.0
            imagePullPolicy: Always
            livenessProbe:
              httpGet:
                path: /
                port: http
            name: code-server
            ports:
            - containerPort: 7777
              name: http
              protocol: TCP
            readinessProbe:
              httpGet:
                path: /
                port: http
            resources: {}
            securityContext:
              runAsUser: 1000
            volumeMounts:
            - mountPath: /home/coder
              name: data
          initContainers:
          - command:
            - sh
            - -c
            - |
              chown -R 1000:1000 /home/coder
            image: busybox:latest
            imagePullPolicy: IfNotPresent
            name: init-chmod-data
            securityContext:
              runAsUser: 0
            volumeMounts:
            - mountPath: /home/coder
              name: data
          securityContext:
            fsGroup: 1000
          serviceAccountName: default
          volumes:
          - name: data
            emptyDir: {}

