//
//Cosmo Dashboard API
//Manipulate cosmo dashboard resource API

// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file dashboard/v1alpha1/template_service.proto (package dashboard.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Template } from "./template_pb.js";

/**
 * @generated from message dashboard.v1alpha1.GetUserAddonTemplatesResponse
 */
export class GetUserAddonTemplatesResponse extends Message<GetUserAddonTemplatesResponse> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: repeated dashboard.v1alpha1.Template items = 2;
   */
  items: Template[] = [];

  constructor(data?: PartialMessage<GetUserAddonTemplatesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dashboard.v1alpha1.GetUserAddonTemplatesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "items", kind: "message", T: Template, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserAddonTemplatesResponse {
    return new GetUserAddonTemplatesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserAddonTemplatesResponse {
    return new GetUserAddonTemplatesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserAddonTemplatesResponse {
    return new GetUserAddonTemplatesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserAddonTemplatesResponse | PlainMessage<GetUserAddonTemplatesResponse> | undefined, b: GetUserAddonTemplatesResponse | PlainMessage<GetUserAddonTemplatesResponse> | undefined): boolean {
    return proto3.util.equals(GetUserAddonTemplatesResponse, a, b);
  }
}

/**
 * @generated from message dashboard.v1alpha1.GetWorkspaceTemplatesResponse
 */
export class GetWorkspaceTemplatesResponse extends Message<GetWorkspaceTemplatesResponse> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: repeated dashboard.v1alpha1.Template items = 2;
   */
  items: Template[] = [];

  constructor(data?: PartialMessage<GetWorkspaceTemplatesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dashboard.v1alpha1.GetWorkspaceTemplatesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "items", kind: "message", T: Template, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkspaceTemplatesResponse {
    return new GetWorkspaceTemplatesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkspaceTemplatesResponse {
    return new GetWorkspaceTemplatesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkspaceTemplatesResponse {
    return new GetWorkspaceTemplatesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorkspaceTemplatesResponse | PlainMessage<GetWorkspaceTemplatesResponse> | undefined, b: GetWorkspaceTemplatesResponse | PlainMessage<GetWorkspaceTemplatesResponse> | undefined): boolean {
    return proto3.util.equals(GetWorkspaceTemplatesResponse, a, b);
  }
}

