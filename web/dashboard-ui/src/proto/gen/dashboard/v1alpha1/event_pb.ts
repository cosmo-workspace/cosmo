//
//Cosmo Dashboard API
//Manipulate cosmo dashboard resource API

// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file dashboard/v1alpha1/event.proto (package dashboard.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message dashboard.v1alpha1.Event
 */
export class Event extends Message<Event> {
  /**
   * @generated from field: google.protobuf.Timestamp eventTime = 1;
   */
  eventTime?: Timestamp;

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * @generated from field: string note = 3;
   */
  note = "";

  /**
   * @generated from field: string reason = 4;
   */
  reason = "";

  /**
   * @generated from field: dashboard.v1alpha1.ObjectReference regarding = 5;
   */
  regarding?: ObjectReference;

  /**
   * @generated from field: string reportingController = 6;
   */
  reportingController = "";

  /**
   * @generated from field: optional dashboard.v1alpha1.EventSeries series = 7;
   */
  series?: EventSeries;

  constructor(data?: PartialMessage<Event>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dashboard.v1alpha1.Event";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "eventTime", kind: "message", T: Timestamp },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "note", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "regarding", kind: "message", T: ObjectReference },
    { no: 6, name: "reportingController", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "series", kind: "message", T: EventSeries, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event {
    return new Event().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJsonString(jsonString, options);
  }

  static equals(a: Event | PlainMessage<Event> | undefined, b: Event | PlainMessage<Event> | undefined): boolean {
    return proto3.util.equals(Event, a, b);
  }
}

/**
 * @generated from message dashboard.v1alpha1.EventSeries
 */
export class EventSeries extends Message<EventSeries> {
  /**
   * @generated from field: int32 count = 1;
   */
  count = 0;

  /**
   * @generated from field: google.protobuf.Timestamp lastObservedTime = 2;
   */
  lastObservedTime?: Timestamp;

  constructor(data?: PartialMessage<EventSeries>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dashboard.v1alpha1.EventSeries";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "lastObservedTime", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventSeries {
    return new EventSeries().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventSeries {
    return new EventSeries().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventSeries {
    return new EventSeries().fromJsonString(jsonString, options);
  }

  static equals(a: EventSeries | PlainMessage<EventSeries> | undefined, b: EventSeries | PlainMessage<EventSeries> | undefined): boolean {
    return proto3.util.equals(EventSeries, a, b);
  }
}

/**
 * @generated from message dashboard.v1alpha1.ObjectReference
 */
export class ObjectReference extends Message<ObjectReference> {
  /**
   * @generated from field: string apiVersion = 1;
   */
  apiVersion = "";

  /**
   * @generated from field: string kind = 2;
   */
  kind = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string namespace = 4;
   */
  namespace = "";

  constructor(data?: PartialMessage<ObjectReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dashboard.v1alpha1.ObjectReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "apiVersion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObjectReference {
    return new ObjectReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObjectReference {
    return new ObjectReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObjectReference {
    return new ObjectReference().fromJsonString(jsonString, options);
  }

  static equals(a: ObjectReference | PlainMessage<ObjectReference> | undefined, b: ObjectReference | PlainMessage<ObjectReference> | undefined): boolean {
    return proto3.util.equals(ObjectReference, a, b);
  }
}

