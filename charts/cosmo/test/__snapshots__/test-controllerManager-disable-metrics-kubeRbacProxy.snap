# chartsnap: snapshot_version=v3
---
# Source: cosmo/charts/traefik/templates/rbac/serviceaccount.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: chartsnap-traefik
  namespace: cosmo-system
  labels:
    app.kubernetes.io/name: traefik
    app.kubernetes.io/instance: chartsnap-cosmo-system
    helm.sh/chart: traefik-28.0.0
    app.kubernetes.io/managed-by: Helm
---
# Source: cosmo/templates/controller-manager/roles.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: cosmo-1.0.0-rc5
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: cosmo
    app.kubernetes.io/version: "v1.0.0-rc5"
    app.kubernetes.io/managed-by: Helm
  name: cosmo-controller-manager
  namespace: cosmo-system
---
# Source: cosmo/templates/dashboard/roles.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: cosmo-1.0.0-rc5
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: cosmo
    app.kubernetes.io/version: "v1.0.0-rc5"
    app.kubernetes.io/managed-by: Helm
  name: cosmo-dashboard
  namespace: cosmo-system
---
# Source: cosmo/templates/auth-env-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cosmo-auth-env
  namespace: "cosmo-system"
immutable: false
data:
  COOKIE_DOMAIN: "ZXhhbXBsZS5jb20="
  SIGNIN_URL: "aHR0cHM6Ly9kYXNoYm9hcmQuZXhhbXBsZS5jb20vIy9zaWduaW4="
  # fetch current secret and get values
  # currentData=map[]
  COOKIE_HASHKEY: "###DYNAMIC_FIELD###"
  COOKIE_BLOCKKEY: "###DYNAMIC_FIELD###"
  COOKIE_SESSION_NAME: "###DYNAMIC_FIELD###"
---
# Source: cosmo/templates/controller-manager/manager.yaml
apiVersion: v1
data:
  controller_manager_config.yaml: |
    apiVersion: controller-runtime.sigs.k8s.io/v1alpha1
    kind: ControllerManagerConfig
    health:
      healthProbeBindAddress: :8081
    metrics:
      bindAddress: 127.0.0.1:8080
    webhook:
      port: 9443
    leaderElection:
      leaderElect: true
      resourceName: 04c57811.cosmo-workspace.github.io
kind: ConfigMap
metadata:
  labels:
    helm.sh/chart: cosmo-1.0.0-rc5
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: cosmo
    app.kubernetes.io/version: "v1.0.0-rc5"
    app.kubernetes.io/managed-by: Helm
  name: cosmo-manager-config
  namespace: cosmo-system
---
# Source: cosmo/charts/traefik/templates/rbac/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: chartsnap-traefik-cosmo-system
  labels:
    app.kubernetes.io/name: traefik
    app.kubernetes.io/instance: chartsnap-cosmo-system
    helm.sh/chart: traefik-28.0.0
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - extensions
  - networking.k8s.io
  resources:
  - ingressclasses
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  - networking.k8s.io
  resources:
  - ingresses/status
  verbs:
  - update
- apiGroups:
  - traefik.io
  resources:
  - ingressroutes
  - ingressroutetcps
  - ingressrouteudps
  - middlewares
  - middlewaretcps
  - tlsoptions
  - tlsstores
  - traefikservices
  - serverstransports
  - serverstransporttcps
  verbs:
  - get
  - list
  - watch
---
# Source: cosmo/templates/controller-manager/roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    helm.sh/chart: cosmo-1.0.0-rc5
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: cosmo
    app.kubernetes.io/version: "v1.0.0-rc5"
    app.kubernetes.io/managed-by: Helm
  name: cosmo-manager-role
rules:
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
---
# Source: cosmo/templates/controller-manager/roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    helm.sh/chart: cosmo-1.0.0-rc5
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: cosmo
    app.kubernetes.io/version: "v1.0.0-rc5"
    app.kubernetes.io/managed-by: Helm
  name: cosmo-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
# Source: cosmo/templates/controller-manager/roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    helm.sh/chart: cosmo-1.0.0-rc5
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: cosmo
    app.kubernetes.io/version: "v1.0.0-rc5"
    app.kubernetes.io/managed-by: Helm
  name: cosmo-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
# Source: cosmo/templates/dashboard/roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    helm.sh/chart: cosmo-1.0.0-rc5
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: cosmo
    app.kubernetes.io/version: "v1.0.0-rc5"
    app.kubernetes.io/managed-by: Helm
  name: cosmo-dashboard
rules:
- apiGroups:
  - ''
  resources:
  - namespaces
  - secrets
  verbs:
  - create
  - delete
  - patch
  - update
  - get
  - list
  - watch
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - roles
  - rolebindings
  verbs:
  - create
  - delete
  - patch
  - update
  - get
  - list
  - watch
  - bind
- apiGroups:
  - cosmo-workspace.github.io
  resources:
  - workspaces
  - users
  verbs:
  - create
  - delete
  - patch
  - update
  - get
  - list
  - watch
- apiGroups:
  - cosmo-workspace.github.io
  resources:
  - workspaces/status
  - users/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cosmo-workspace.github.io
  resources:
  - instances
  - templates
  - clusterinstances
  - clustertemplates
  verbs:
  - create
  - delete
  - patch
  - update
  - get
  - list
  - watch
- apiGroups:
  - cosmo-workspace.github.io
  resources:
  - instances/status
  verbs:
  - get
  - list
  - watch
---
# Source: cosmo/charts/traefik/templates/rbac/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: chartsnap-traefik-cosmo-system
  labels:
    app.kubernetes.io/name: traefik
    app.kubernetes.io/instance: chartsnap-cosmo-system
    helm.sh/chart: traefik-28.0.0
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: chartsnap-traefik-cosmo-system
subjects:
- kind: ServiceAccount
  name: chartsnap-traefik
  namespace: cosmo-system
---
# Source: cosmo/templates/controller-manager/roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    helm.sh/chart: cosmo-1.0.0-rc5
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: cosmo
    app.kubernetes.io/version: "v1.0.0-rc5"
    app.kubernetes.io/managed-by: Helm
  name: cosmo-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cosmo-manager-role
subjects:
- kind: ServiceAccount
  name: cosmo-controller-manager
  namespace: cosmo-system
---
# Source: cosmo/templates/controller-manager/roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    helm.sh/chart: cosmo-1.0.0-rc5
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: cosmo
    app.kubernetes.io/version: "v1.0.0-rc5"
    app.kubernetes.io/managed-by: Helm
  name: cosmo-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cosmo-proxy-role
subjects:
- kind: ServiceAccount
  name: cosmo-controller-manager
  namespace: cosmo-system
---
# Source: cosmo/templates/dashboard/roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    helm.sh/chart: cosmo-1.0.0-rc5
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: cosmo
    app.kubernetes.io/version: "v1.0.0-rc5"
    app.kubernetes.io/managed-by: Helm
  name: cosmo-dashboard-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cosmo-dashboard
subjects:
- kind: ServiceAccount
  name: cosmo-dashboard
  namespace: cosmo-system
---
# Source: cosmo/templates/controller-manager/roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    helm.sh/chart: cosmo-1.0.0-rc5
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: cosmo
    app.kubernetes.io/version: "v1.0.0-rc5"
    app.kubernetes.io/managed-by: Helm
  name: cosmo-leader-election-role
  namespace: cosmo-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
# Source: cosmo/templates/controller-manager/roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    helm.sh/chart: cosmo-1.0.0-rc5
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: cosmo
    app.kubernetes.io/version: "v1.0.0-rc5"
    app.kubernetes.io/managed-by: Helm
  name: cosmo-leader-election-rolebinding
  namespace: cosmo-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cosmo-leader-election-role
subjects:
- kind: ServiceAccount
  name: cosmo-controller-manager
  namespace: cosmo-system
---
# Source: cosmo/charts/traefik/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: chartsnap-traefik
  namespace: cosmo-system
  labels:
    app.kubernetes.io/name: traefik
    app.kubernetes.io/instance: chartsnap-cosmo-system
    helm.sh/chart: traefik-28.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: traefik
    app.kubernetes.io/instance: chartsnap-cosmo-system
  ports:
  - port: 80
    name: "web"
    targetPort: web
    protocol: TCP
  - port: 443
    name: "websecure"
    targetPort: websecure
    protocol: TCP
---
# Source: cosmo/templates/controller-manager/manager.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: cosmo-1.0.0-rc5
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: cosmo
    app.kubernetes.io/version: "v1.0.0-rc5"
    app.kubernetes.io/managed-by: Helm
  name: cosmo-controller-manager-metrics-service
  namespace: cosmo-system
spec:
  ports:
  - name: https
    port: 8443
    targetPort: 8080
  selector:
    cosmo-workspace.github.io: controller-manager
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: cosmo
---
# Source: cosmo/templates/controller-manager/manager.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: cosmo-1.0.0-rc5
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: cosmo
    app.kubernetes.io/version: "v1.0.0-rc5"
    app.kubernetes.io/managed-by: Helm
  name: cosmo-webhook-service
  namespace: cosmo-system
spec:
  ports:
  - port: 443
    targetPort: 9443
  selector:
    cosmo-workspace.github.io: controller-manager
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: cosmo
---
# Source: cosmo/templates/dashboard/dashboard.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: cosmo-1.0.0-rc5
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: cosmo
    app.kubernetes.io/version: "v1.0.0-rc5"
    app.kubernetes.io/managed-by: Helm
  name: cosmo-dashboard
  namespace: cosmo-system
  annotations:
    traefik.ingress.kubernetes.io/service.serversscheme: https
spec:
  type: ClusterIP
  ports:
  - name: cosmo-dashboard-server
    port: 8443
    protocol: TCP
    targetPort: 8443
  selector:
    cosmo-workspace.github.io: dashboard
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: cosmo
---
# Source: cosmo/charts/traefik/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chartsnap-traefik
  namespace: cosmo-system
  labels:
    app.kubernetes.io/name: traefik
    app.kubernetes.io/instance: chartsnap-cosmo-system
    helm.sh/chart: traefik-28.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: traefik
      app.kubernetes.io/instance: chartsnap-cosmo-system
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  minReadySeconds: 0
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "9100"
      labels:
        app.kubernetes.io/name: traefik
        app.kubernetes.io/instance: chartsnap-cosmo-system
        helm.sh/chart: traefik-28.0.0
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: chartsnap-traefik
      terminationGracePeriodSeconds: 60
      hostNetwork: false
      initContainers:
      - command:
        - sh
        - -c
        - cp -r /plugins-local/* /local-plugins/
        image: ghcr.io/cosmo-workspace/cosmo-traefik-plugins:latest
        imagePullPolicy: IfNotPresent
        name: copy-plugins
        volumeMounts:
        - mountPath: /local-plugins
          name: local-plugins
      containers:
      - image: docker.io/traefik:v3.0.0
        imagePullPolicy: IfNotPresent
        name: chartsnap-traefik
        resources:
        readinessProbe:
          httpGet:
            path: /ping
            port: 9000
            scheme: HTTP
          failureThreshold: 1
          initialDelaySeconds: 2
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 2
        livenessProbe:
          httpGet:
            path: /ping
            port: 9000
            scheme: HTTP
          failureThreshold: 3
          initialDelaySeconds: 2
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 2
        lifecycle:
        ports:
        - name: "metrics"
          containerPort: 9100
          protocol: "TCP"
        - name: "traefik"
          containerPort: 9000
          protocol: "TCP"
        - name: "web"
          containerPort: 8000
          protocol: "TCP"
        - name: "websecure"
          containerPort: 8443
          protocol: "TCP"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        volumeMounts:
        - name: data
          mountPath: /data
        - name: tmp
          mountPath: /tmp
        - mountPath: /plugins-local
          name: local-plugins
        - mountPath: /plugins-storage
          name: plugins
        args:
        - "--global.sendanonymoususage"
        - "--serversTransport.insecureSkipVerify=true"
        - "--entryPoints.metrics.address=:9100/tcp"
        - "--entryPoints.traefik.address=:9000/tcp"
        - "--entryPoints.web.address=:8000/tcp"
        - "--entryPoints.websecure.address=:8443/tcp"
        - "--api.dashboard=true"
        - "--ping=true"
        - "--metrics.prometheus=true"
        - "--metrics.prometheus.entrypoint=metrics"
        - "--providers.kubernetescrd"
        - "--providers.kubernetescrd.allowCrossNamespace=true"
        - "--providers.kubernetesingress"
        - "--providers.kubernetesingress.ingressendpoint.publishedservice=cosmo-system/chartsnap-traefik"
        - "--entryPoints.websecure.http.tls=true"
        - "--log.level=INFO"
        - "--experimental.localPlugins.cosmoauth.modulename=github.com/cosmo-workspace/cosmoauth"
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        envFrom:
        - secretRef:
            name: cosmo-auth-env
      volumes:
      - name: data
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      - emptyDir: {}
        name: local-plugins
      - emptyDir: {}
        name: plugins
      securityContext:
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 65532
        runAsNonRoot: true
        runAsUser: 65532
---
# Source: cosmo/templates/controller-manager/manager.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    helm.sh/chart: cosmo-1.0.0-rc5
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: cosmo
    app.kubernetes.io/version: "v1.0.0-rc5"
    app.kubernetes.io/managed-by: Helm
  name: cosmo-controller-manager
  namespace: cosmo-system
spec:
  replicas: 1
  selector:
    matchLabels:
      cosmo-workspace.github.io: controller-manager
      app.kubernetes.io/instance: chartsnap
      app.kubernetes.io/name: cosmo
  template:
    metadata:
      labels:
        cosmo-workspace.github.io: controller-manager
        app.kubernetes.io/instance: chartsnap
        app.kubernetes.io/name: cosmo
    spec:
      containers:
      - args:
        - --port=9443
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=0.0.0.0:8080
        - --leader-elect
        - --zap-log-level=info
        - --zap-time-encoding=iso8601
        - --traefik-entrypoints=web,websecure
        - --traefik-authen-middleware=cosmo-auth
        - --traefik-authen-middleware-namespace=cosmo-system
        - --traefik-username-header-middleware=cosmo-username-headers
        - --workspace-urlbase-protocol=https
        - --workspace-urlbase-host={{NETRULE}}-{{WORKSPACE}}-{{USER}}
        - --workspace-urlbase-domain=example.com
        command:
        - /manager
        image: ghcr.io/cosmo-workspace/cosmo-controller-manager:v1.0.0-rc5
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        name: manager
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        - containerPort: 8080
          name: metrics
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 20Mi
        securityContext:
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
      securityContext:
        runAsNonRoot: true
      serviceAccountName: cosmo-controller-manager
      terminationGracePeriodSeconds: 10
      imagePullSecrets: []
      nodeSelector: {}
      affinity: {}
      tolerations: []
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: webhook-server-cert
---
# Source: cosmo/templates/dashboard/dashboard.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    helm.sh/chart: cosmo-1.0.0-rc5
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: cosmo
    app.kubernetes.io/version: "v1.0.0-rc5"
    app.kubernetes.io/managed-by: Helm
  name: cosmo-dashboard
  namespace: cosmo-system
spec:
  replicas: 1
  selector:
    matchLabels:
      cosmo-workspace.github.io: dashboard
      app.kubernetes.io/instance: chartsnap
      app.kubernetes.io/name: cosmo
  template:
    metadata:
      labels:
        cosmo-workspace.github.io: dashboard
        app.kubernetes.io/instance: chartsnap
        app.kubernetes.io/name: cosmo
    spec:
      containers:
      - args:
        - --port=8443
        - --maxage-minutes=720
        - --zap-log-level=info
        - --zap-time-encoding=iso8601
        - --cookie-domain=$(COOKIE_DOMAIN)
        - --cookie-hashkey=$(COOKIE_HASHKEY)
        - --cookie-blockkey=$(COOKIE_BLOCKKEY)
        - --cookie-session-name=$(COOKIE_SESSION_NAME)
        - --signin-url=$(SIGNIN_URL)
        - --graceful-shutdown-seconds=10
        - --timeout-seconds=5
        - --tls-key=/app/cert/tls.key
        - --tls-cert=/app/cert/tls.crt
        command:
        - /app/dashboard
        image: "ghcr.io/cosmo-workspace/cosmo-dashboard:v1.0.0-rc5"
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 15
          periodSeconds: 20
        name: dashboard
        envFrom:
        - secretRef:
            name: cosmo-auth-env
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 20Mi
        securityContext: {}
        volumeMounts:
        - mountPath: /app/cert
          name: cert
          readOnly: true
      securityContext: {}
      serviceAccountName: cosmo-dashboard
      terminationGracePeriodSeconds: 10
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: dashboard-server-cert
---
# Source: cosmo/charts/traefik/templates/ingressclass.yaml
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  annotations:
    ingressclass.kubernetes.io/is-default-class: "true"
  labels:
    app.kubernetes.io/name: traefik
    app.kubernetes.io/instance: chartsnap-cosmo-system
    helm.sh/chart: traefik-28.0.0
    app.kubernetes.io/managed-by: Helm
  name: chartsnap-traefik
spec:
  controller: traefik.io/ingress-controller
---
# Source: cosmo/templates/controller-manager/cert.yaml
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  labels:
    helm.sh/chart: cosmo-1.0.0-rc5
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: cosmo
    app.kubernetes.io/version: "v1.0.0-rc5"
    app.kubernetes.io/managed-by: Helm
  name: cosmo-webhook-cert
  namespace: cosmo-system
spec:
  dnsNames:
  - cosmo-webhook-service.cosmo-system.svc
  - cosmo-webhook-service.cosmo-system.svc.cluster.local
  issuerRef:
    kind: Issuer
    name: cosmo-selfsigned-issuer
  secretName: webhook-server-cert
---
# Source: cosmo/templates/dashboard/cert.yaml
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  labels:
    helm.sh/chart: cosmo-1.0.0-rc5
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: cosmo
    app.kubernetes.io/version: "v1.0.0-rc5"
    app.kubernetes.io/managed-by: Helm
  name: cosmo-dashboard-cert
  namespace: cosmo-system
spec:
  dnsNames:
  - cosmo-dashboard.cosmo-system.svc
  - cosmo-dashboard.cosmo-system.svc.cluster.local
  issuerRef:
    kind: Issuer
    name: cosmo-selfsigned-issuer
  secretName: dashboard-server-cert
---
# Source: cosmo/charts/traefik/templates/dashboard-ingressroute.yaml
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: chartsnap-traefik-dashboard
  namespace: cosmo-system
  labels:
    app.kubernetes.io/name: traefik
    app.kubernetes.io/instance: chartsnap-cosmo-system
    helm.sh/chart: traefik-28.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  entryPoints:
  - traefik
  routes:
  - match: PathPrefix(`/dashboard`) || PathPrefix(`/api`)
    kind: Rule
    services:
    - name: api@internal
      kind: TraefikService
---
# Source: cosmo/templates/dashboard/ingressroute.yaml
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: cosmo-dashboard
  namespace: cosmo-system
  labels:
    helm.sh/chart: cosmo-1.0.0-rc5
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: cosmo
    app.kubernetes.io/version: "v1.0.0-rc5"
    app.kubernetes.io/managed-by: Helm
spec:
  entryPoints:
  - web
  - websecure
  routes:
  - kind: Rule
    match: Host(`dashboard.example.com`) && (Path(`/`) || PathPrefix(`/logo`) || PathPrefix(`/assets/`) || PathPrefix(`/dashboard.v1alpha1.AuthService/`) || PathPrefix(`/dashboard.v1alpha1.WebAuthnService/`))
    priority: 1001
    services:
    - kind: Service
      name: cosmo-dashboard
      namespace: cosmo-system
      port: cosmo-dashboard-server
      scheme: https
  - kind: Rule
    match: Host(`dashboard.example.com`)
    priority: 1000
    services:
    - kind: Service
      name: cosmo-dashboard
      namespace: cosmo-system
      port: cosmo-dashboard-server
      scheme: https
    middlewares:
    - name: cosmo-auth
---
# Source: cosmo/templates/issuer.yaml
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  labels:
    helm.sh/chart: cosmo-1.0.0-rc5
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: cosmo
    app.kubernetes.io/version: "v1.0.0-rc5"
    app.kubernetes.io/managed-by: Helm
  name: cosmo-selfsigned-issuer
  namespace: cosmo-system
spec:
  selfSigned: {}
---
# Source: cosmo/templates/cosmo-auth-middleware.yaml
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: cosmo-auth
  namespace: "cosmo-system"
spec:
  plugin:
    cosmoauth:
      logLevel: DEBUG
      cookieSessionName: "${COOKIE_SESSION_NAME}"
      cookieDomain: "${COOKIE_DOMAIN}"
      cookieHashKey: "${COOKIE_HASHKEY}"
      cookieBlockKey: "${COOKIE_BLOCKKEY}"
      signInUrl: "${SIGNIN_URL}"
---
# Source: cosmo/templates/controller-manager/webhook.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: cosmo-system/cosmo-webhook-cert
  labels:
    helm.sh/chart: cosmo-1.0.0-rc5
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: cosmo
    app.kubernetes.io/version: "v1.0.0-rc5"
    app.kubernetes.io/managed-by: Helm
  name: cosmo-mutating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  - v1alpha1
  clientConfig:
    caBundle: Cg==
    service:
      name: cosmo-webhook-service
      namespace: cosmo-system
      path: /mutate-cosmo-workspace-github-io-v1alpha1-instance
  failurePolicy: Fail
  name: minstance.kb.io
  rules:
  - apiGroups:
    - cosmo-workspace.github.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - instances
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1alpha1
  clientConfig:
    caBundle: Cg==
    service:
      name: cosmo-webhook-service
      namespace: cosmo-system
      path: /mutate-cosmo-workspace-github-io-v1alpha1-instance
  failurePolicy: Fail
  name: mclusterinstance.kb.io
  rules:
  - apiGroups:
    - cosmo-workspace.github.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - clusterinstances
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1alpha1
  clientConfig:
    caBundle: Cg==
    service:
      name: cosmo-webhook-service
      namespace: cosmo-system
      path: /mutate-cosmo-workspace-github-io-v1alpha1-user
  failurePolicy: Fail
  name: muser.kb.io
  rules:
  - apiGroups:
    - cosmo-workspace.github.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - users
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1alpha1
  clientConfig:
    caBundle: Cg==
    service:
      name: cosmo-webhook-service
      namespace: cosmo-system
      path: /mutate-cosmo-workspace-github-io-v1alpha1-workspace
  failurePolicy: Fail
  name: mworkspace.kb.io
  rules:
  - apiGroups:
    - cosmo-workspace.github.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - workspaces
  sideEffects: None
---
# Source: cosmo/templates/cosmo-username-headers-addon.yaml
apiVersion: cosmo-workspace.github.io/v1alpha1
kind: Template
metadata:
  annotations:
    cosmo-workspace.github.io/disable-nameprefix: "true"
    useraddon.cosmo-workspace.github.io/default: "true"
  creationTimestamp: null
  labels:
    cosmo-workspace.github.io/type: useraddon
  name: cosmo-username-headers
spec:
  description: Traefik middleware for user authorization. DO NOT EDIT
  rawYaml: |
    apiVersion: traefik.io/v1alpha1
    kind: Middleware
    metadata:
      labels:
        cosmo-workspace.github.io/instance: '{{INSTANCE}}'
        cosmo-workspace.github.io/template: '{{TEMPLATE}}'
      name: cosmo-username-headers
      namespace: '{{NAMESPACE}}'
    spec:
      headers:
        customRequestHeaders:
          X-Cosmo-UserName: '{{USER_NAME}}'
        customResponseHeaders:
          X-Cosmo-UserName: '{{USER_NAME}}'
---
# Source: cosmo/templates/controller-manager/webhook.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: cosmo-system/cosmo-webhook-cert
  labels:
    helm.sh/chart: cosmo-1.0.0-rc5
    app.kubernetes.io/instance: chartsnap
    app.kubernetes.io/name: cosmo
    app.kubernetes.io/version: "v1.0.0-rc5"
    app.kubernetes.io/managed-by: Helm
  name: cosmo-validating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  - v1alpha1
  clientConfig:
    caBundle: Cg==
    service:
      name: cosmo-webhook-service
      namespace: cosmo-system
      path: /validate-cosmo-workspace-github-io-v1alpha1-instance
  failurePolicy: Fail
  name: vclusterinstance.kb.io
  rules:
  - apiGroups:
    - cosmo-workspace.github.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - clusterinstances
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1alpha1
  clientConfig:
    caBundle: Cg==
    service:
      name: cosmo-webhook-service
      namespace: cosmo-system
      path: /validate-cosmo-workspace-github-io-v1alpha1-instance
  failurePolicy: Fail
  name: vinstance.kb.io
  rules:
  - apiGroups:
    - cosmo-workspace.github.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - instances
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1alpha1
  clientConfig:
    caBundle: Cg==
    service:
      name: cosmo-webhook-service
      namespace: cosmo-system
      path: /validate-cosmo-workspace-github-io-v1alpha1-user
  failurePolicy: Fail
  name: vuser.kb.io
  rules:
  - apiGroups:
    - cosmo-workspace.github.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - users
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1alpha1
  clientConfig:
    caBundle: Cg==
    service:
      name: cosmo-webhook-service
      namespace: cosmo-system
      path: /validate-cosmo-workspace-github-io-v1alpha1-workspace
  failurePolicy: Fail
  name: vworkspace.kb.io
  rules:
  - apiGroups:
    - cosmo-workspace.github.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - workspaces
  sideEffects: None
