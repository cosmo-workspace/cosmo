// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dashboard/v1alpha1/workspace_service.proto

package dashboardv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWorkspaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWorkspaceRequestMultiError, or nil if none found.
func (m *CreateWorkspaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWorkspaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserName()) < 1 {
		err := CreateWorkspaceRequestValidationError{
			field:  "UserName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetWsName()) < 1 {
		err := CreateWorkspaceRequestValidationError{
			field:  "WsName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTemplate()) < 1 {
		err := CreateWorkspaceRequestValidationError{
			field:  "Template",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Vars

	if len(errors) > 0 {
		return CreateWorkspaceRequestMultiError(errors)
	}

	return nil
}

// CreateWorkspaceRequestMultiError is an error wrapping multiple validation
// errors returned by CreateWorkspaceRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateWorkspaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWorkspaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWorkspaceRequestMultiError) AllErrors() []error { return m }

// CreateWorkspaceRequestValidationError is the validation error returned by
// CreateWorkspaceRequest.Validate if the designated constraints aren't met.
type CreateWorkspaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWorkspaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWorkspaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWorkspaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWorkspaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWorkspaceRequestValidationError) ErrorName() string {
	return "CreateWorkspaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWorkspaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWorkspaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWorkspaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWorkspaceRequestValidationError{}

// Validate checks the field values on CreateWorkspaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWorkspaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWorkspaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWorkspaceResponseMultiError, or nil if none found.
func (m *CreateWorkspaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWorkspaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetWorkspace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWorkspaceResponseValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWorkspaceResponseValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkspace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWorkspaceResponseValidationError{
				field:  "Workspace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateWorkspaceResponseMultiError(errors)
	}

	return nil
}

// CreateWorkspaceResponseMultiError is an error wrapping multiple validation
// errors returned by CreateWorkspaceResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateWorkspaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWorkspaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWorkspaceResponseMultiError) AllErrors() []error { return m }

// CreateWorkspaceResponseValidationError is the validation error returned by
// CreateWorkspaceResponse.Validate if the designated constraints aren't met.
type CreateWorkspaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWorkspaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWorkspaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWorkspaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWorkspaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWorkspaceResponseValidationError) ErrorName() string {
	return "CreateWorkspaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWorkspaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWorkspaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWorkspaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWorkspaceResponseValidationError{}

// Validate checks the field values on DeleteNetworkRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNetworkRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNetworkRuleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNetworkRuleResponseMultiError, or nil if none found.
func (m *DeleteNetworkRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNetworkRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetNetworkRule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteNetworkRuleResponseValidationError{
					field:  "NetworkRule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteNetworkRuleResponseValidationError{
					field:  "NetworkRule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNetworkRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteNetworkRuleResponseValidationError{
				field:  "NetworkRule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteNetworkRuleResponseMultiError(errors)
	}

	return nil
}

// DeleteNetworkRuleResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteNetworkRuleResponse.ValidateAll() if the
// designated constraints aren't met.
type DeleteNetworkRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNetworkRuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNetworkRuleResponseMultiError) AllErrors() []error { return m }

// DeleteNetworkRuleResponseValidationError is the validation error returned by
// DeleteNetworkRuleResponse.Validate if the designated constraints aren't met.
type DeleteNetworkRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNetworkRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNetworkRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNetworkRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNetworkRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNetworkRuleResponseValidationError) ErrorName() string {
	return "DeleteNetworkRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNetworkRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNetworkRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNetworkRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNetworkRuleResponseValidationError{}

// Validate checks the field values on DeleteWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWorkspaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWorkspaceRequestMultiError, or nil if none found.
func (m *DeleteWorkspaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWorkspaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserName

	// no validation rules for WsName

	if len(errors) > 0 {
		return DeleteWorkspaceRequestMultiError(errors)
	}

	return nil
}

// DeleteWorkspaceRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteWorkspaceRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteWorkspaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWorkspaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWorkspaceRequestMultiError) AllErrors() []error { return m }

// DeleteWorkspaceRequestValidationError is the validation error returned by
// DeleteWorkspaceRequest.Validate if the designated constraints aren't met.
type DeleteWorkspaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWorkspaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWorkspaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWorkspaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWorkspaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWorkspaceRequestValidationError) ErrorName() string {
	return "DeleteWorkspaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWorkspaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWorkspaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWorkspaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWorkspaceRequestValidationError{}

// Validate checks the field values on UpdateWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkspaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWorkspaceRequestMultiError, or nil if none found.
func (m *UpdateWorkspaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkspaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserName

	// no validation rules for WsName

	if m.Replicas != nil {
		// no validation rules for Replicas
	}

	if len(errors) > 0 {
		return UpdateWorkspaceRequestMultiError(errors)
	}

	return nil
}

// UpdateWorkspaceRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateWorkspaceRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateWorkspaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkspaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkspaceRequestMultiError) AllErrors() []error { return m }

// UpdateWorkspaceRequestValidationError is the validation error returned by
// UpdateWorkspaceRequest.Validate if the designated constraints aren't met.
type UpdateWorkspaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkspaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkspaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkspaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkspaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkspaceRequestValidationError) ErrorName() string {
	return "UpdateWorkspaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkspaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkspaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkspaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkspaceRequestValidationError{}

// Validate checks the field values on UpdateWorkspaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkspaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkspaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWorkspaceResponseMultiError, or nil if none found.
func (m *UpdateWorkspaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkspaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetWorkspace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWorkspaceResponseValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWorkspaceResponseValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkspace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWorkspaceResponseValidationError{
				field:  "Workspace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateWorkspaceResponseMultiError(errors)
	}

	return nil
}

// UpdateWorkspaceResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateWorkspaceResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateWorkspaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkspaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkspaceResponseMultiError) AllErrors() []error { return m }

// UpdateWorkspaceResponseValidationError is the validation error returned by
// UpdateWorkspaceResponse.Validate if the designated constraints aren't met.
type UpdateWorkspaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkspaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkspaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkspaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkspaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkspaceResponseValidationError) ErrorName() string {
	return "UpdateWorkspaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkspaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkspaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkspaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkspaceResponseValidationError{}

// Validate checks the field values on GetWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkspaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkspaceRequestMultiError, or nil if none found.
func (m *GetWorkspaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkspaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserName

	// no validation rules for WsName

	if len(errors) > 0 {
		return GetWorkspaceRequestMultiError(errors)
	}

	return nil
}

// GetWorkspaceRequestMultiError is an error wrapping multiple validation
// errors returned by GetWorkspaceRequest.ValidateAll() if the designated
// constraints aren't met.
type GetWorkspaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkspaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkspaceRequestMultiError) AllErrors() []error { return m }

// GetWorkspaceRequestValidationError is the validation error returned by
// GetWorkspaceRequest.Validate if the designated constraints aren't met.
type GetWorkspaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkspaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkspaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkspaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkspaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkspaceRequestValidationError) ErrorName() string {
	return "GetWorkspaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkspaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkspaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkspaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkspaceRequestValidationError{}

// Validate checks the field values on GetWorkspaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkspaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkspaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkspaceResponseMultiError, or nil if none found.
func (m *GetWorkspaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkspaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkspace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWorkspaceResponseValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWorkspaceResponseValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkspace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWorkspaceResponseValidationError{
				field:  "Workspace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetWorkspaceResponseMultiError(errors)
	}

	return nil
}

// GetWorkspaceResponseMultiError is an error wrapping multiple validation
// errors returned by GetWorkspaceResponse.ValidateAll() if the designated
// constraints aren't met.
type GetWorkspaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkspaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkspaceResponseMultiError) AllErrors() []error { return m }

// GetWorkspaceResponseValidationError is the validation error returned by
// GetWorkspaceResponse.Validate if the designated constraints aren't met.
type GetWorkspaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkspaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkspaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkspaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkspaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkspaceResponseValidationError) ErrorName() string {
	return "GetWorkspaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkspaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkspaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkspaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkspaceResponseValidationError{}

// Validate checks the field values on GetWorkspacesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkspacesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkspacesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkspacesRequestMultiError, or nil if none found.
func (m *GetWorkspacesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkspacesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserName

	if len(errors) > 0 {
		return GetWorkspacesRequestMultiError(errors)
	}

	return nil
}

// GetWorkspacesRequestMultiError is an error wrapping multiple validation
// errors returned by GetWorkspacesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetWorkspacesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkspacesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkspacesRequestMultiError) AllErrors() []error { return m }

// GetWorkspacesRequestValidationError is the validation error returned by
// GetWorkspacesRequest.Validate if the designated constraints aren't met.
type GetWorkspacesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkspacesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkspacesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkspacesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkspacesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkspacesRequestValidationError) ErrorName() string {
	return "GetWorkspacesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkspacesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkspacesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkspacesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkspacesRequestValidationError{}

// Validate checks the field values on GetWorkspacesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkspacesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkspacesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkspacesResponseMultiError, or nil if none found.
func (m *GetWorkspacesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkspacesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWorkspacesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWorkspacesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWorkspacesResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetWorkspacesResponseMultiError(errors)
	}

	return nil
}

// GetWorkspacesResponseMultiError is an error wrapping multiple validation
// errors returned by GetWorkspacesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetWorkspacesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkspacesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkspacesResponseMultiError) AllErrors() []error { return m }

// GetWorkspacesResponseValidationError is the validation error returned by
// GetWorkspacesResponse.Validate if the designated constraints aren't met.
type GetWorkspacesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkspacesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkspacesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkspacesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkspacesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkspacesResponseValidationError) ErrorName() string {
	return "GetWorkspacesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkspacesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkspacesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkspacesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkspacesResponseValidationError{}

// Validate checks the field values on UpsertNetworkRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertNetworkRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertNetworkRuleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertNetworkRuleRequestMultiError, or nil if none found.
func (m *UpsertNetworkRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertNetworkRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserName

	// no validation rules for WsName

	if all {
		switch v := interface{}(m.GetNetworkRule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertNetworkRuleRequestValidationError{
					field:  "NetworkRule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertNetworkRuleRequestValidationError{
					field:  "NetworkRule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNetworkRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertNetworkRuleRequestValidationError{
				field:  "NetworkRule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Index

	if len(errors) > 0 {
		return UpsertNetworkRuleRequestMultiError(errors)
	}

	return nil
}

// UpsertNetworkRuleRequestMultiError is an error wrapping multiple validation
// errors returned by UpsertNetworkRuleRequest.ValidateAll() if the designated
// constraints aren't met.
type UpsertNetworkRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertNetworkRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertNetworkRuleRequestMultiError) AllErrors() []error { return m }

// UpsertNetworkRuleRequestValidationError is the validation error returned by
// UpsertNetworkRuleRequest.Validate if the designated constraints aren't met.
type UpsertNetworkRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertNetworkRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertNetworkRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertNetworkRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertNetworkRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertNetworkRuleRequestValidationError) ErrorName() string {
	return "UpsertNetworkRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertNetworkRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertNetworkRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertNetworkRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertNetworkRuleRequestValidationError{}

// Validate checks the field values on UpsertNetworkRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertNetworkRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertNetworkRuleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertNetworkRuleResponseMultiError, or nil if none found.
func (m *UpsertNetworkRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertNetworkRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetNetworkRule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertNetworkRuleResponseValidationError{
					field:  "NetworkRule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertNetworkRuleResponseValidationError{
					field:  "NetworkRule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNetworkRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertNetworkRuleResponseValidationError{
				field:  "NetworkRule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpsertNetworkRuleResponseMultiError(errors)
	}

	return nil
}

// UpsertNetworkRuleResponseMultiError is an error wrapping multiple validation
// errors returned by UpsertNetworkRuleResponse.ValidateAll() if the
// designated constraints aren't met.
type UpsertNetworkRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertNetworkRuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertNetworkRuleResponseMultiError) AllErrors() []error { return m }

// UpsertNetworkRuleResponseValidationError is the validation error returned by
// UpsertNetworkRuleResponse.Validate if the designated constraints aren't met.
type UpsertNetworkRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertNetworkRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertNetworkRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertNetworkRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertNetworkRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertNetworkRuleResponseValidationError) ErrorName() string {
	return "UpsertNetworkRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertNetworkRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertNetworkRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertNetworkRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertNetworkRuleResponseValidationError{}

// Validate checks the field values on DeleteNetworkRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNetworkRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNetworkRuleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNetworkRuleRequestMultiError, or nil if none found.
func (m *DeleteNetworkRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNetworkRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserName

	// no validation rules for WsName

	// no validation rules for Index

	if len(errors) > 0 {
		return DeleteNetworkRuleRequestMultiError(errors)
	}

	return nil
}

// DeleteNetworkRuleRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteNetworkRuleRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteNetworkRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNetworkRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNetworkRuleRequestMultiError) AllErrors() []error { return m }

// DeleteNetworkRuleRequestValidationError is the validation error returned by
// DeleteNetworkRuleRequest.Validate if the designated constraints aren't met.
type DeleteNetworkRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNetworkRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNetworkRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNetworkRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNetworkRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNetworkRuleRequestValidationError) ErrorName() string {
	return "DeleteNetworkRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNetworkRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNetworkRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNetworkRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNetworkRuleRequestValidationError{}

// Validate checks the field values on DeleteWorkspaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWorkspaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWorkspaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWorkspaceResponseMultiError, or nil if none found.
func (m *DeleteWorkspaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWorkspaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetWorkspace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteWorkspaceResponseValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteWorkspaceResponseValidationError{
					field:  "Workspace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkspace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteWorkspaceResponseValidationError{
				field:  "Workspace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteWorkspaceResponseMultiError(errors)
	}

	return nil
}

// DeleteWorkspaceResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteWorkspaceResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteWorkspaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWorkspaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWorkspaceResponseMultiError) AllErrors() []error { return m }

// DeleteWorkspaceResponseValidationError is the validation error returned by
// DeleteWorkspaceResponse.Validate if the designated constraints aren't met.
type DeleteWorkspaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWorkspaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWorkspaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWorkspaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWorkspaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWorkspaceResponseValidationError) ErrorName() string {
	return "DeleteWorkspaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWorkspaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWorkspaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWorkspaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWorkspaceResponseValidationError{}
