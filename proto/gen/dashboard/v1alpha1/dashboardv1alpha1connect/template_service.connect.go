//
//Cosmo Dashboard API
//Manipulate cosmo dashboard resource API

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: dashboard/v1alpha1/template_service.proto

package dashboardv1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/cosmo-workspace/cosmo/proto/gen/dashboard/v1alpha1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TemplateServiceName is the fully-qualified name of the TemplateService service.
	TemplateServiceName = "dashboard.v1alpha1.TemplateService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TemplateServiceGetUserAddonTemplatesProcedure is the fully-qualified name of the
	// TemplateService's GetUserAddonTemplates RPC.
	TemplateServiceGetUserAddonTemplatesProcedure = "/dashboard.v1alpha1.TemplateService/GetUserAddonTemplates"
	// TemplateServiceGetWorkspaceTemplatesProcedure is the fully-qualified name of the
	// TemplateService's GetWorkspaceTemplates RPC.
	TemplateServiceGetWorkspaceTemplatesProcedure = "/dashboard.v1alpha1.TemplateService/GetWorkspaceTemplates"
)

// TemplateServiceClient is a client for the dashboard.v1alpha1.TemplateService service.
type TemplateServiceClient interface {
	// List templates typed useraddon
	GetUserAddonTemplates(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1alpha1.GetUserAddonTemplatesResponse], error)
	// List templates typed workspace
	GetWorkspaceTemplates(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1alpha1.GetWorkspaceTemplatesResponse], error)
}

// NewTemplateServiceClient constructs a client for the dashboard.v1alpha1.TemplateService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTemplateServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TemplateServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &templateServiceClient{
		getUserAddonTemplates: connect_go.NewClient[emptypb.Empty, v1alpha1.GetUserAddonTemplatesResponse](
			httpClient,
			baseURL+TemplateServiceGetUserAddonTemplatesProcedure,
			opts...,
		),
		getWorkspaceTemplates: connect_go.NewClient[emptypb.Empty, v1alpha1.GetWorkspaceTemplatesResponse](
			httpClient,
			baseURL+TemplateServiceGetWorkspaceTemplatesProcedure,
			opts...,
		),
	}
}

// templateServiceClient implements TemplateServiceClient.
type templateServiceClient struct {
	getUserAddonTemplates *connect_go.Client[emptypb.Empty, v1alpha1.GetUserAddonTemplatesResponse]
	getWorkspaceTemplates *connect_go.Client[emptypb.Empty, v1alpha1.GetWorkspaceTemplatesResponse]
}

// GetUserAddonTemplates calls dashboard.v1alpha1.TemplateService.GetUserAddonTemplates.
func (c *templateServiceClient) GetUserAddonTemplates(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1alpha1.GetUserAddonTemplatesResponse], error) {
	return c.getUserAddonTemplates.CallUnary(ctx, req)
}

// GetWorkspaceTemplates calls dashboard.v1alpha1.TemplateService.GetWorkspaceTemplates.
func (c *templateServiceClient) GetWorkspaceTemplates(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1alpha1.GetWorkspaceTemplatesResponse], error) {
	return c.getWorkspaceTemplates.CallUnary(ctx, req)
}

// TemplateServiceHandler is an implementation of the dashboard.v1alpha1.TemplateService service.
type TemplateServiceHandler interface {
	// List templates typed useraddon
	GetUserAddonTemplates(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1alpha1.GetUserAddonTemplatesResponse], error)
	// List templates typed workspace
	GetWorkspaceTemplates(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1alpha1.GetWorkspaceTemplatesResponse], error)
}

// NewTemplateServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTemplateServiceHandler(svc TemplateServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(TemplateServiceGetUserAddonTemplatesProcedure, connect_go.NewUnaryHandler(
		TemplateServiceGetUserAddonTemplatesProcedure,
		svc.GetUserAddonTemplates,
		opts...,
	))
	mux.Handle(TemplateServiceGetWorkspaceTemplatesProcedure, connect_go.NewUnaryHandler(
		TemplateServiceGetWorkspaceTemplatesProcedure,
		svc.GetWorkspaceTemplates,
		opts...,
	))
	return "/dashboard.v1alpha1.TemplateService/", mux
}

// UnimplementedTemplateServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTemplateServiceHandler struct{}

func (UnimplementedTemplateServiceHandler) GetUserAddonTemplates(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1alpha1.GetUserAddonTemplatesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dashboard.v1alpha1.TemplateService.GetUserAddonTemplates is not implemented"))
}

func (UnimplementedTemplateServiceHandler) GetWorkspaceTemplates(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1alpha1.GetWorkspaceTemplatesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dashboard.v1alpha1.TemplateService.GetWorkspaceTemplates is not implemented"))
}
