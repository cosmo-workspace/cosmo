//
//Cosmo Dashboard API
//Manipulate cosmo dashboard resource API

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: dashboard/v1alpha1/workspace_service.proto

package dashboardv1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/cosmo-workspace/cosmo/proto/gen/dashboard/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// WorkspaceServiceName is the fully-qualified name of the WorkspaceService service.
	WorkspaceServiceName = "dashboard.v1alpha1.WorkspaceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WorkspaceServiceCreateWorkspaceProcedure is the fully-qualified name of the WorkspaceService's
	// CreateWorkspace RPC.
	WorkspaceServiceCreateWorkspaceProcedure = "/dashboard.v1alpha1.WorkspaceService/CreateWorkspace"
	// WorkspaceServiceDeleteWorkspaceProcedure is the fully-qualified name of the WorkspaceService's
	// DeleteWorkspace RPC.
	WorkspaceServiceDeleteWorkspaceProcedure = "/dashboard.v1alpha1.WorkspaceService/DeleteWorkspace"
	// WorkspaceServiceUpdateWorkspaceProcedure is the fully-qualified name of the WorkspaceService's
	// UpdateWorkspace RPC.
	WorkspaceServiceUpdateWorkspaceProcedure = "/dashboard.v1alpha1.WorkspaceService/UpdateWorkspace"
	// WorkspaceServiceGetWorkspaceProcedure is the fully-qualified name of the WorkspaceService's
	// GetWorkspace RPC.
	WorkspaceServiceGetWorkspaceProcedure = "/dashboard.v1alpha1.WorkspaceService/GetWorkspace"
	// WorkspaceServiceGetWorkspacesProcedure is the fully-qualified name of the WorkspaceService's
	// GetWorkspaces RPC.
	WorkspaceServiceGetWorkspacesProcedure = "/dashboard.v1alpha1.WorkspaceService/GetWorkspaces"
	// WorkspaceServiceUpsertNetworkRuleProcedure is the fully-qualified name of the WorkspaceService's
	// UpsertNetworkRule RPC.
	WorkspaceServiceUpsertNetworkRuleProcedure = "/dashboard.v1alpha1.WorkspaceService/UpsertNetworkRule"
	// WorkspaceServiceDeleteNetworkRuleProcedure is the fully-qualified name of the WorkspaceService's
	// DeleteNetworkRule RPC.
	WorkspaceServiceDeleteNetworkRuleProcedure = "/dashboard.v1alpha1.WorkspaceService/DeleteNetworkRule"
)

// WorkspaceServiceClient is a client for the dashboard.v1alpha1.WorkspaceService service.
type WorkspaceServiceClient interface {
	// Create a new Workspace
	CreateWorkspace(context.Context, *connect_go.Request[v1alpha1.CreateWorkspaceRequest]) (*connect_go.Response[v1alpha1.CreateWorkspaceResponse], error)
	// Delete workspace
	DeleteWorkspace(context.Context, *connect_go.Request[v1alpha1.DeleteWorkspaceRequest]) (*connect_go.Response[v1alpha1.DeleteWorkspaceResponse], error)
	// Update workspace
	UpdateWorkspace(context.Context, *connect_go.Request[v1alpha1.UpdateWorkspaceRequest]) (*connect_go.Response[v1alpha1.UpdateWorkspaceResponse], error)
	// Returns a single Workspace model
	GetWorkspace(context.Context, *connect_go.Request[v1alpha1.GetWorkspaceRequest]) (*connect_go.Response[v1alpha1.GetWorkspaceResponse], error)
	// Returns an array of Workspace model
	GetWorkspaces(context.Context, *connect_go.Request[v1alpha1.GetWorkspacesRequest]) (*connect_go.Response[v1alpha1.GetWorkspacesResponse], error)
	// Upsert workspace network rule
	UpsertNetworkRule(context.Context, *connect_go.Request[v1alpha1.UpsertNetworkRuleRequest]) (*connect_go.Response[v1alpha1.UpsertNetworkRuleResponse], error)
	// Remove workspace network rule
	DeleteNetworkRule(context.Context, *connect_go.Request[v1alpha1.DeleteNetworkRuleRequest]) (*connect_go.Response[v1alpha1.DeleteNetworkRuleResponse], error)
}

// NewWorkspaceServiceClient constructs a client for the dashboard.v1alpha1.WorkspaceService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWorkspaceServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) WorkspaceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &workspaceServiceClient{
		createWorkspace: connect_go.NewClient[v1alpha1.CreateWorkspaceRequest, v1alpha1.CreateWorkspaceResponse](
			httpClient,
			baseURL+WorkspaceServiceCreateWorkspaceProcedure,
			opts...,
		),
		deleteWorkspace: connect_go.NewClient[v1alpha1.DeleteWorkspaceRequest, v1alpha1.DeleteWorkspaceResponse](
			httpClient,
			baseURL+WorkspaceServiceDeleteWorkspaceProcedure,
			opts...,
		),
		updateWorkspace: connect_go.NewClient[v1alpha1.UpdateWorkspaceRequest, v1alpha1.UpdateWorkspaceResponse](
			httpClient,
			baseURL+WorkspaceServiceUpdateWorkspaceProcedure,
			opts...,
		),
		getWorkspace: connect_go.NewClient[v1alpha1.GetWorkspaceRequest, v1alpha1.GetWorkspaceResponse](
			httpClient,
			baseURL+WorkspaceServiceGetWorkspaceProcedure,
			opts...,
		),
		getWorkspaces: connect_go.NewClient[v1alpha1.GetWorkspacesRequest, v1alpha1.GetWorkspacesResponse](
			httpClient,
			baseURL+WorkspaceServiceGetWorkspacesProcedure,
			opts...,
		),
		upsertNetworkRule: connect_go.NewClient[v1alpha1.UpsertNetworkRuleRequest, v1alpha1.UpsertNetworkRuleResponse](
			httpClient,
			baseURL+WorkspaceServiceUpsertNetworkRuleProcedure,
			opts...,
		),
		deleteNetworkRule: connect_go.NewClient[v1alpha1.DeleteNetworkRuleRequest, v1alpha1.DeleteNetworkRuleResponse](
			httpClient,
			baseURL+WorkspaceServiceDeleteNetworkRuleProcedure,
			opts...,
		),
	}
}

// workspaceServiceClient implements WorkspaceServiceClient.
type workspaceServiceClient struct {
	createWorkspace   *connect_go.Client[v1alpha1.CreateWorkspaceRequest, v1alpha1.CreateWorkspaceResponse]
	deleteWorkspace   *connect_go.Client[v1alpha1.DeleteWorkspaceRequest, v1alpha1.DeleteWorkspaceResponse]
	updateWorkspace   *connect_go.Client[v1alpha1.UpdateWorkspaceRequest, v1alpha1.UpdateWorkspaceResponse]
	getWorkspace      *connect_go.Client[v1alpha1.GetWorkspaceRequest, v1alpha1.GetWorkspaceResponse]
	getWorkspaces     *connect_go.Client[v1alpha1.GetWorkspacesRequest, v1alpha1.GetWorkspacesResponse]
	upsertNetworkRule *connect_go.Client[v1alpha1.UpsertNetworkRuleRequest, v1alpha1.UpsertNetworkRuleResponse]
	deleteNetworkRule *connect_go.Client[v1alpha1.DeleteNetworkRuleRequest, v1alpha1.DeleteNetworkRuleResponse]
}

// CreateWorkspace calls dashboard.v1alpha1.WorkspaceService.CreateWorkspace.
func (c *workspaceServiceClient) CreateWorkspace(ctx context.Context, req *connect_go.Request[v1alpha1.CreateWorkspaceRequest]) (*connect_go.Response[v1alpha1.CreateWorkspaceResponse], error) {
	return c.createWorkspace.CallUnary(ctx, req)
}

// DeleteWorkspace calls dashboard.v1alpha1.WorkspaceService.DeleteWorkspace.
func (c *workspaceServiceClient) DeleteWorkspace(ctx context.Context, req *connect_go.Request[v1alpha1.DeleteWorkspaceRequest]) (*connect_go.Response[v1alpha1.DeleteWorkspaceResponse], error) {
	return c.deleteWorkspace.CallUnary(ctx, req)
}

// UpdateWorkspace calls dashboard.v1alpha1.WorkspaceService.UpdateWorkspace.
func (c *workspaceServiceClient) UpdateWorkspace(ctx context.Context, req *connect_go.Request[v1alpha1.UpdateWorkspaceRequest]) (*connect_go.Response[v1alpha1.UpdateWorkspaceResponse], error) {
	return c.updateWorkspace.CallUnary(ctx, req)
}

// GetWorkspace calls dashboard.v1alpha1.WorkspaceService.GetWorkspace.
func (c *workspaceServiceClient) GetWorkspace(ctx context.Context, req *connect_go.Request[v1alpha1.GetWorkspaceRequest]) (*connect_go.Response[v1alpha1.GetWorkspaceResponse], error) {
	return c.getWorkspace.CallUnary(ctx, req)
}

// GetWorkspaces calls dashboard.v1alpha1.WorkspaceService.GetWorkspaces.
func (c *workspaceServiceClient) GetWorkspaces(ctx context.Context, req *connect_go.Request[v1alpha1.GetWorkspacesRequest]) (*connect_go.Response[v1alpha1.GetWorkspacesResponse], error) {
	return c.getWorkspaces.CallUnary(ctx, req)
}

// UpsertNetworkRule calls dashboard.v1alpha1.WorkspaceService.UpsertNetworkRule.
func (c *workspaceServiceClient) UpsertNetworkRule(ctx context.Context, req *connect_go.Request[v1alpha1.UpsertNetworkRuleRequest]) (*connect_go.Response[v1alpha1.UpsertNetworkRuleResponse], error) {
	return c.upsertNetworkRule.CallUnary(ctx, req)
}

// DeleteNetworkRule calls dashboard.v1alpha1.WorkspaceService.DeleteNetworkRule.
func (c *workspaceServiceClient) DeleteNetworkRule(ctx context.Context, req *connect_go.Request[v1alpha1.DeleteNetworkRuleRequest]) (*connect_go.Response[v1alpha1.DeleteNetworkRuleResponse], error) {
	return c.deleteNetworkRule.CallUnary(ctx, req)
}

// WorkspaceServiceHandler is an implementation of the dashboard.v1alpha1.WorkspaceService service.
type WorkspaceServiceHandler interface {
	// Create a new Workspace
	CreateWorkspace(context.Context, *connect_go.Request[v1alpha1.CreateWorkspaceRequest]) (*connect_go.Response[v1alpha1.CreateWorkspaceResponse], error)
	// Delete workspace
	DeleteWorkspace(context.Context, *connect_go.Request[v1alpha1.DeleteWorkspaceRequest]) (*connect_go.Response[v1alpha1.DeleteWorkspaceResponse], error)
	// Update workspace
	UpdateWorkspace(context.Context, *connect_go.Request[v1alpha1.UpdateWorkspaceRequest]) (*connect_go.Response[v1alpha1.UpdateWorkspaceResponse], error)
	// Returns a single Workspace model
	GetWorkspace(context.Context, *connect_go.Request[v1alpha1.GetWorkspaceRequest]) (*connect_go.Response[v1alpha1.GetWorkspaceResponse], error)
	// Returns an array of Workspace model
	GetWorkspaces(context.Context, *connect_go.Request[v1alpha1.GetWorkspacesRequest]) (*connect_go.Response[v1alpha1.GetWorkspacesResponse], error)
	// Upsert workspace network rule
	UpsertNetworkRule(context.Context, *connect_go.Request[v1alpha1.UpsertNetworkRuleRequest]) (*connect_go.Response[v1alpha1.UpsertNetworkRuleResponse], error)
	// Remove workspace network rule
	DeleteNetworkRule(context.Context, *connect_go.Request[v1alpha1.DeleteNetworkRuleRequest]) (*connect_go.Response[v1alpha1.DeleteNetworkRuleResponse], error)
}

// NewWorkspaceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWorkspaceServiceHandler(svc WorkspaceServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(WorkspaceServiceCreateWorkspaceProcedure, connect_go.NewUnaryHandler(
		WorkspaceServiceCreateWorkspaceProcedure,
		svc.CreateWorkspace,
		opts...,
	))
	mux.Handle(WorkspaceServiceDeleteWorkspaceProcedure, connect_go.NewUnaryHandler(
		WorkspaceServiceDeleteWorkspaceProcedure,
		svc.DeleteWorkspace,
		opts...,
	))
	mux.Handle(WorkspaceServiceUpdateWorkspaceProcedure, connect_go.NewUnaryHandler(
		WorkspaceServiceUpdateWorkspaceProcedure,
		svc.UpdateWorkspace,
		opts...,
	))
	mux.Handle(WorkspaceServiceGetWorkspaceProcedure, connect_go.NewUnaryHandler(
		WorkspaceServiceGetWorkspaceProcedure,
		svc.GetWorkspace,
		opts...,
	))
	mux.Handle(WorkspaceServiceGetWorkspacesProcedure, connect_go.NewUnaryHandler(
		WorkspaceServiceGetWorkspacesProcedure,
		svc.GetWorkspaces,
		opts...,
	))
	mux.Handle(WorkspaceServiceUpsertNetworkRuleProcedure, connect_go.NewUnaryHandler(
		WorkspaceServiceUpsertNetworkRuleProcedure,
		svc.UpsertNetworkRule,
		opts...,
	))
	mux.Handle(WorkspaceServiceDeleteNetworkRuleProcedure, connect_go.NewUnaryHandler(
		WorkspaceServiceDeleteNetworkRuleProcedure,
		svc.DeleteNetworkRule,
		opts...,
	))
	return "/dashboard.v1alpha1.WorkspaceService/", mux
}

// UnimplementedWorkspaceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWorkspaceServiceHandler struct{}

func (UnimplementedWorkspaceServiceHandler) CreateWorkspace(context.Context, *connect_go.Request[v1alpha1.CreateWorkspaceRequest]) (*connect_go.Response[v1alpha1.CreateWorkspaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dashboard.v1alpha1.WorkspaceService.CreateWorkspace is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) DeleteWorkspace(context.Context, *connect_go.Request[v1alpha1.DeleteWorkspaceRequest]) (*connect_go.Response[v1alpha1.DeleteWorkspaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dashboard.v1alpha1.WorkspaceService.DeleteWorkspace is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) UpdateWorkspace(context.Context, *connect_go.Request[v1alpha1.UpdateWorkspaceRequest]) (*connect_go.Response[v1alpha1.UpdateWorkspaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dashboard.v1alpha1.WorkspaceService.UpdateWorkspace is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) GetWorkspace(context.Context, *connect_go.Request[v1alpha1.GetWorkspaceRequest]) (*connect_go.Response[v1alpha1.GetWorkspaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dashboard.v1alpha1.WorkspaceService.GetWorkspace is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) GetWorkspaces(context.Context, *connect_go.Request[v1alpha1.GetWorkspacesRequest]) (*connect_go.Response[v1alpha1.GetWorkspacesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dashboard.v1alpha1.WorkspaceService.GetWorkspaces is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) UpsertNetworkRule(context.Context, *connect_go.Request[v1alpha1.UpsertNetworkRuleRequest]) (*connect_go.Response[v1alpha1.UpsertNetworkRuleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dashboard.v1alpha1.WorkspaceService.UpsertNetworkRule is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) DeleteNetworkRule(context.Context, *connect_go.Request[v1alpha1.DeleteNetworkRuleRequest]) (*connect_go.Response[v1alpha1.DeleteNetworkRuleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dashboard.v1alpha1.WorkspaceService.DeleteNetworkRule is not implemented"))
}
