//
//Cosmo Dashboard API
//Manipulate cosmo dashboard resource API

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: dashboard/v1alpha1/event_service.proto

package dashboardv1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/cosmo-workspace/cosmo/proto/gen/dashboard/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// StreamServiceName is the fully-qualified name of the StreamService service.
	StreamServiceName = "dashboard.v1alpha1.StreamService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StreamServiceStreamingEventsProcedure is the fully-qualified name of the StreamService's
	// StreamingEvents RPC.
	StreamServiceStreamingEventsProcedure = "/dashboard.v1alpha1.StreamService/StreamingEvents"
)

// StreamServiceClient is a client for the dashboard.v1alpha1.StreamService service.
type StreamServiceClient interface {
	// Streaming new events for user
	StreamingEvents(context.Context, *connect_go.Request[v1alpha1.GetEventsRequest]) (*connect_go.ServerStreamForClient[v1alpha1.GetEventsResponse], error)
}

// NewStreamServiceClient constructs a client for the dashboard.v1alpha1.StreamService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStreamServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) StreamServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &streamServiceClient{
		streamingEvents: connect_go.NewClient[v1alpha1.GetEventsRequest, v1alpha1.GetEventsResponse](
			httpClient,
			baseURL+StreamServiceStreamingEventsProcedure,
			opts...,
		),
	}
}

// streamServiceClient implements StreamServiceClient.
type streamServiceClient struct {
	streamingEvents *connect_go.Client[v1alpha1.GetEventsRequest, v1alpha1.GetEventsResponse]
}

// StreamingEvents calls dashboard.v1alpha1.StreamService.StreamingEvents.
func (c *streamServiceClient) StreamingEvents(ctx context.Context, req *connect_go.Request[v1alpha1.GetEventsRequest]) (*connect_go.ServerStreamForClient[v1alpha1.GetEventsResponse], error) {
	return c.streamingEvents.CallServerStream(ctx, req)
}

// StreamServiceHandler is an implementation of the dashboard.v1alpha1.StreamService service.
type StreamServiceHandler interface {
	// Streaming new events for user
	StreamingEvents(context.Context, *connect_go.Request[v1alpha1.GetEventsRequest], *connect_go.ServerStream[v1alpha1.GetEventsResponse]) error
}

// NewStreamServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStreamServiceHandler(svc StreamServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(StreamServiceStreamingEventsProcedure, connect_go.NewServerStreamHandler(
		StreamServiceStreamingEventsProcedure,
		svc.StreamingEvents,
		opts...,
	))
	return "/dashboard.v1alpha1.StreamService/", mux
}

// UnimplementedStreamServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStreamServiceHandler struct{}

func (UnimplementedStreamServiceHandler) StreamingEvents(context.Context, *connect_go.Request[v1alpha1.GetEventsRequest], *connect_go.ServerStream[v1alpha1.GetEventsResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dashboard.v1alpha1.StreamService.StreamingEvents is not implemented"))
}
