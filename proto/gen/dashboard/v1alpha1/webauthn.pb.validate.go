// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dashboard/v1alpha1/webauthn.proto

package dashboardv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BeginRegistrationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BeginRegistrationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BeginRegistrationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BeginRegistrationRequestMultiError, or nil if none found.
func (m *BeginRegistrationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BeginRegistrationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserName()) < 1 {
		err := BeginRegistrationRequestValidationError{
			field:  "UserName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BeginRegistrationRequestMultiError(errors)
	}

	return nil
}

// BeginRegistrationRequestMultiError is an error wrapping multiple validation
// errors returned by BeginRegistrationRequest.ValidateAll() if the designated
// constraints aren't met.
type BeginRegistrationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BeginRegistrationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BeginRegistrationRequestMultiError) AllErrors() []error { return m }

// BeginRegistrationRequestValidationError is the validation error returned by
// BeginRegistrationRequest.Validate if the designated constraints aren't met.
type BeginRegistrationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BeginRegistrationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BeginRegistrationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BeginRegistrationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BeginRegistrationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BeginRegistrationRequestValidationError) ErrorName() string {
	return "BeginRegistrationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BeginRegistrationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBeginRegistrationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BeginRegistrationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BeginRegistrationRequestValidationError{}

// Validate checks the field values on BeginRegistrationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BeginRegistrationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BeginRegistrationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BeginRegistrationResponseMultiError, or nil if none found.
func (m *BeginRegistrationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BeginRegistrationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CredentialCreationOptions

	if len(errors) > 0 {
		return BeginRegistrationResponseMultiError(errors)
	}

	return nil
}

// BeginRegistrationResponseMultiError is an error wrapping multiple validation
// errors returned by BeginRegistrationResponse.ValidateAll() if the
// designated constraints aren't met.
type BeginRegistrationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BeginRegistrationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BeginRegistrationResponseMultiError) AllErrors() []error { return m }

// BeginRegistrationResponseValidationError is the validation error returned by
// BeginRegistrationResponse.Validate if the designated constraints aren't met.
type BeginRegistrationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BeginRegistrationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BeginRegistrationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BeginRegistrationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BeginRegistrationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BeginRegistrationResponseValidationError) ErrorName() string {
	return "BeginRegistrationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BeginRegistrationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBeginRegistrationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BeginRegistrationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BeginRegistrationResponseValidationError{}

// Validate checks the field values on FinishRegistrationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FinishRegistrationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FinishRegistrationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FinishRegistrationRequestMultiError, or nil if none found.
func (m *FinishRegistrationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FinishRegistrationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserName()) < 1 {
		err := FinishRegistrationRequestValidationError{
			field:  "UserName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCredentialCreationResponse()) < 1 {
		err := FinishRegistrationRequestValidationError{
			field:  "CredentialCreationResponse",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FinishRegistrationRequestMultiError(errors)
	}

	return nil
}

// FinishRegistrationRequestMultiError is an error wrapping multiple validation
// errors returned by FinishRegistrationRequest.ValidateAll() if the
// designated constraints aren't met.
type FinishRegistrationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FinishRegistrationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FinishRegistrationRequestMultiError) AllErrors() []error { return m }

// FinishRegistrationRequestValidationError is the validation error returned by
// FinishRegistrationRequest.Validate if the designated constraints aren't met.
type FinishRegistrationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FinishRegistrationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FinishRegistrationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FinishRegistrationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FinishRegistrationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FinishRegistrationRequestValidationError) ErrorName() string {
	return "FinishRegistrationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FinishRegistrationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFinishRegistrationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FinishRegistrationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FinishRegistrationRequestValidationError{}

// Validate checks the field values on FinishRegistrationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FinishRegistrationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FinishRegistrationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FinishRegistrationResponseMultiError, or nil if none found.
func (m *FinishRegistrationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FinishRegistrationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return FinishRegistrationResponseMultiError(errors)
	}

	return nil
}

// FinishRegistrationResponseMultiError is an error wrapping multiple
// validation errors returned by FinishRegistrationResponse.ValidateAll() if
// the designated constraints aren't met.
type FinishRegistrationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FinishRegistrationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FinishRegistrationResponseMultiError) AllErrors() []error { return m }

// FinishRegistrationResponseValidationError is the validation error returned
// by FinishRegistrationResponse.Validate if the designated constraints aren't met.
type FinishRegistrationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FinishRegistrationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FinishRegistrationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FinishRegistrationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FinishRegistrationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FinishRegistrationResponseValidationError) ErrorName() string {
	return "FinishRegistrationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FinishRegistrationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFinishRegistrationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FinishRegistrationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FinishRegistrationResponseValidationError{}

// Validate checks the field values on BeginLoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BeginLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BeginLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BeginLoginRequestMultiError, or nil if none found.
func (m *BeginLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BeginLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserName()) < 1 {
		err := BeginLoginRequestValidationError{
			field:  "UserName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BeginLoginRequestMultiError(errors)
	}

	return nil
}

// BeginLoginRequestMultiError is an error wrapping multiple validation errors
// returned by BeginLoginRequest.ValidateAll() if the designated constraints
// aren't met.
type BeginLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BeginLoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BeginLoginRequestMultiError) AllErrors() []error { return m }

// BeginLoginRequestValidationError is the validation error returned by
// BeginLoginRequest.Validate if the designated constraints aren't met.
type BeginLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BeginLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BeginLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BeginLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BeginLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BeginLoginRequestValidationError) ErrorName() string {
	return "BeginLoginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BeginLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBeginLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BeginLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BeginLoginRequestValidationError{}

// Validate checks the field values on BeginLoginResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BeginLoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BeginLoginResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BeginLoginResponseMultiError, or nil if none found.
func (m *BeginLoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BeginLoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CredentialRequestOptions

	if len(errors) > 0 {
		return BeginLoginResponseMultiError(errors)
	}

	return nil
}

// BeginLoginResponseMultiError is an error wrapping multiple validation errors
// returned by BeginLoginResponse.ValidateAll() if the designated constraints
// aren't met.
type BeginLoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BeginLoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BeginLoginResponseMultiError) AllErrors() []error { return m }

// BeginLoginResponseValidationError is the validation error returned by
// BeginLoginResponse.Validate if the designated constraints aren't met.
type BeginLoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BeginLoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BeginLoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BeginLoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BeginLoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BeginLoginResponseValidationError) ErrorName() string {
	return "BeginLoginResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BeginLoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBeginLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BeginLoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BeginLoginResponseValidationError{}

// Validate checks the field values on FinishLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FinishLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FinishLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FinishLoginRequestMultiError, or nil if none found.
func (m *FinishLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FinishLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserName()) < 1 {
		err := FinishLoginRequestValidationError{
			field:  "UserName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCredentialRequestResult()) < 1 {
		err := FinishLoginRequestValidationError{
			field:  "CredentialRequestResult",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FinishLoginRequestMultiError(errors)
	}

	return nil
}

// FinishLoginRequestMultiError is an error wrapping multiple validation errors
// returned by FinishLoginRequest.ValidateAll() if the designated constraints
// aren't met.
type FinishLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FinishLoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FinishLoginRequestMultiError) AllErrors() []error { return m }

// FinishLoginRequestValidationError is the validation error returned by
// FinishLoginRequest.Validate if the designated constraints aren't met.
type FinishLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FinishLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FinishLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FinishLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FinishLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FinishLoginRequestValidationError) ErrorName() string {
	return "FinishLoginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FinishLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFinishLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FinishLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FinishLoginRequestValidationError{}

// Validate checks the field values on FinishLoginResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FinishLoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FinishLoginResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FinishLoginResponseMultiError, or nil if none found.
func (m *FinishLoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FinishLoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetExpireAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FinishLoginResponseValidationError{
					field:  "ExpireAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FinishLoginResponseValidationError{
					field:  "ExpireAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpireAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FinishLoginResponseValidationError{
				field:  "ExpireAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FinishLoginResponseMultiError(errors)
	}

	return nil
}

// FinishLoginResponseMultiError is an error wrapping multiple validation
// errors returned by FinishLoginResponse.ValidateAll() if the designated
// constraints aren't met.
type FinishLoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FinishLoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FinishLoginResponseMultiError) AllErrors() []error { return m }

// FinishLoginResponseValidationError is the validation error returned by
// FinishLoginResponse.Validate if the designated constraints aren't met.
type FinishLoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FinishLoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FinishLoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FinishLoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FinishLoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FinishLoginResponseValidationError) ErrorName() string {
	return "FinishLoginResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FinishLoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFinishLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FinishLoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FinishLoginResponseValidationError{}

// Validate checks the field values on ListCredentialsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCredentialsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCredentialsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCredentialsRequestMultiError, or nil if none found.
func (m *ListCredentialsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCredentialsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserName()) < 1 {
		err := ListCredentialsRequestValidationError{
			field:  "UserName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListCredentialsRequestMultiError(errors)
	}

	return nil
}

// ListCredentialsRequestMultiError is an error wrapping multiple validation
// errors returned by ListCredentialsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCredentialsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCredentialsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCredentialsRequestMultiError) AllErrors() []error { return m }

// ListCredentialsRequestValidationError is the validation error returned by
// ListCredentialsRequest.Validate if the designated constraints aren't met.
type ListCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCredentialsRequestValidationError) ErrorName() string {
	return "ListCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCredentialsRequestValidationError{}

// Validate checks the field values on ListCredentialsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCredentialsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCredentialsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCredentialsResponseMultiError, or nil if none found.
func (m *ListCredentialsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCredentialsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	for idx, item := range m.GetCredentials() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCredentialsResponseValidationError{
						field:  fmt.Sprintf("Credentials[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCredentialsResponseValidationError{
						field:  fmt.Sprintf("Credentials[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCredentialsResponseValidationError{
					field:  fmt.Sprintf("Credentials[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCredentialsResponseMultiError(errors)
	}

	return nil
}

// ListCredentialsResponseMultiError is an error wrapping multiple validation
// errors returned by ListCredentialsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCredentialsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCredentialsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCredentialsResponseMultiError) AllErrors() []error { return m }

// ListCredentialsResponseValidationError is the validation error returned by
// ListCredentialsResponse.Validate if the designated constraints aren't met.
type ListCredentialsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCredentialsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCredentialsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCredentialsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCredentialsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCredentialsResponseValidationError) ErrorName() string {
	return "ListCredentialsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCredentialsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCredentialsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCredentialsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCredentialsResponseValidationError{}

// Validate checks the field values on Credential with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Credential) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Credential with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CredentialMultiError, or
// nil if none found.
func (m *Credential) ValidateAll() error {
	return m.validate(true)
}

func (m *Credential) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DisplayName

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CredentialValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CredentialValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CredentialValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CredentialMultiError(errors)
	}

	return nil
}

// CredentialMultiError is an error wrapping multiple validation errors
// returned by Credential.ValidateAll() if the designated constraints aren't met.
type CredentialMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CredentialMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CredentialMultiError) AllErrors() []error { return m }

// CredentialValidationError is the validation error returned by
// Credential.Validate if the designated constraints aren't met.
type CredentialValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CredentialValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CredentialValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CredentialValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CredentialValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CredentialValidationError) ErrorName() string { return "CredentialValidationError" }

// Error satisfies the builtin error interface
func (e CredentialValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCredential.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CredentialValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CredentialValidationError{}

// Validate checks the field values on DeleteCredentialRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCredentialRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCredentialRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCredentialRequestMultiError, or nil if none found.
func (m *DeleteCredentialRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCredentialRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserName()) < 1 {
		err := DeleteCredentialRequestValidationError{
			field:  "UserName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCredId()) < 1 {
		err := DeleteCredentialRequestValidationError{
			field:  "CredId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteCredentialRequestMultiError(errors)
	}

	return nil
}

// DeleteCredentialRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCredentialRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCredentialRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCredentialRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCredentialRequestMultiError) AllErrors() []error { return m }

// DeleteCredentialRequestValidationError is the validation error returned by
// DeleteCredentialRequest.Validate if the designated constraints aren't met.
type DeleteCredentialRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCredentialRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCredentialRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCredentialRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCredentialRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCredentialRequestValidationError) ErrorName() string {
	return "DeleteCredentialRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCredentialRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCredentialRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCredentialRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCredentialRequestValidationError{}

// Validate checks the field values on DeleteCredentialResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCredentialResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCredentialResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCredentialResponseMultiError, or nil if none found.
func (m *DeleteCredentialResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCredentialResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteCredentialResponseMultiError(errors)
	}

	return nil
}

// DeleteCredentialResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteCredentialResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteCredentialResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCredentialResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCredentialResponseMultiError) AllErrors() []error { return m }

// DeleteCredentialResponseValidationError is the validation error returned by
// DeleteCredentialResponse.Validate if the designated constraints aren't met.
type DeleteCredentialResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCredentialResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCredentialResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCredentialResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCredentialResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCredentialResponseValidationError) ErrorName() string {
	return "DeleteCredentialResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCredentialResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCredentialResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCredentialResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCredentialResponseValidationError{}

// Validate checks the field values on UpdateCredentialRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCredentialRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCredentialRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCredentialRequestMultiError, or nil if none found.
func (m *UpdateCredentialRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCredentialRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserName()) < 1 {
		err := UpdateCredentialRequestValidationError{
			field:  "UserName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCredId()) < 1 {
		err := UpdateCredentialRequestValidationError{
			field:  "CredId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CredDisplayName

	if len(errors) > 0 {
		return UpdateCredentialRequestMultiError(errors)
	}

	return nil
}

// UpdateCredentialRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCredentialRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCredentialRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCredentialRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCredentialRequestMultiError) AllErrors() []error { return m }

// UpdateCredentialRequestValidationError is the validation error returned by
// UpdateCredentialRequest.Validate if the designated constraints aren't met.
type UpdateCredentialRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCredentialRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCredentialRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCredentialRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCredentialRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCredentialRequestValidationError) ErrorName() string {
	return "UpdateCredentialRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCredentialRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCredentialRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCredentialRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCredentialRequestValidationError{}

// Validate checks the field values on UpdateCredentialResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCredentialResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCredentialResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCredentialResponseMultiError, or nil if none found.
func (m *UpdateCredentialResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCredentialResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateCredentialResponseMultiError(errors)
	}

	return nil
}

// UpdateCredentialResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCredentialResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCredentialResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCredentialResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCredentialResponseMultiError) AllErrors() []error { return m }

// UpdateCredentialResponseValidationError is the validation error returned by
// UpdateCredentialResponse.Validate if the designated constraints aren't met.
type UpdateCredentialResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCredentialResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCredentialResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCredentialResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCredentialResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCredentialResponseValidationError) ErrorName() string {
	return "UpdateCredentialResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCredentialResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCredentialResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCredentialResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCredentialResponseValidationError{}
