['cosmoctl [workspace] [create] ✅ success in normal context: workspace create ws1 --user user1 --template template1 --vars HOGE:HOGEHOGE 1']
SnapShot = """
\u001B[32mSuccessfully created workspace ws1
\u001B[0m"""

['cosmoctl [workspace] [create] ✅ success in normal context: workspace create ws1 --user user1 --template template1 --vars HOGE:HOGEHOGE 2']
SnapShot = """
{
  \"Name\": \"ws1\",
  \"Namespace\": \"cosmo-user-user1\",
  \"Spec\": {
    \"template\": {
      \"name\": \"template1\"
    },
    \"replicas\": 1,
    \"vars\": {
      \"HOGE\": \"HOGEHOGE\"
    },
    \"network\": [
      {
        \"protocol\": \"http\",
        \"portNumber\": 18080,
        \"customHostPrefix\": \"main\",
        \"httpPath\": \"/\",
        \"public\": false
      }
    ]
  },
  \"Status\": {
    \"instance\": {},
    \"config\": {}
  }
}
"""

['cosmoctl [workspace] [create] ✅ success in normal context: workspace create ws1 --user user1 --template template1 1']
SnapShot = """
\u001B[32mSuccessfully created workspace ws1
\u001B[0m"""

['cosmoctl [workspace] [create] ✅ success in normal context: workspace create ws1 --user user1 --template template1 2']
SnapShot = """
{
  \"Name\": \"ws1\",
  \"Namespace\": \"cosmo-user-user1\",
  \"Spec\": {
    \"template\": {
      \"name\": \"template1\"
    },
    \"replicas\": 1,
    \"network\": [
      {
        \"protocol\": \"http\",
        \"portNumber\": 18080,
        \"customHostPrefix\": \"main\",
        \"httpPath\": \"/\",
        \"public\": false
      }
    ]
  },
  \"Status\": {
    \"instance\": {},
    \"config\": {}
  }
}
"""

['cosmoctl [workspace] [create] ✅ success with dry-run: workspace create ws1 --user user1 --template template1 --vars HOGE:HOGEHOGE --dry-run 1']
SnapShot = """
apiVersion: cosmo-workspace.github.io/v1alpha1
kind: Workspace
metadata:
  creationTimestamp: xxxxxxxx
  generation: 1
  managedFields:
  - apiVersion: cosmo-workspace.github.io/v1alpha1
    fieldsType: FieldsV1
    fieldsV1:
      f:spec:
        .: {}
        f:template:
          .: {}
          f:name: {}
        f:vars:
          .: {}
          f:HOGE: {}
    manager: cmd.test
    operation: Update
    time: xxxxxxxx
  name: ws1
  namespace: cosmo-user-user1
  uid: xxxxxxxx
spec:
  network:
  - customHostPrefix: main
    httpPath: /
    portNumber: 18080
    protocol: http
    public: false
  replicas: 1
  template:
    name: template1
  vars:
    HOGE: HOGEHOGE
status:
  config:
    mainServicePortName: main
    serviceName: workspace
  instance: {}
  phase: Pending

\u001B[32mSuccessfully created workspace ws1 (dry-run)
\u001B[0m"""

['cosmoctl [workspace] [create] ❌ fail with invalid args: workspace create --user user1 --template template1 1']
SnapShot = """
Error: validation error: invalid args
Usage:
  cosmoctl workspace create WORKSPACE_NAME --template TEMPLATE_NAME [flags]

Examples:
create my-code-server --user example-user --template code-server --vars PVC_SIZE_Gi:10

Flags:
      --dry-run           dry run
  -h, --help              help for create
  -t, --template string   template name
      --vars string       template vars. the format is VarName:VarValue. also it can be set multiple vars by conma separated list. (example: VAR1:VAL1,VAR2:VAL2)

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [create] ❌ fail with invalid args: workspace create 1']
SnapShot = """
Error: validation error: invalid args
Usage:
  cosmoctl workspace create WORKSPACE_NAME --template TEMPLATE_NAME [flags]

Examples:
create my-code-server --user example-user --template code-server --vars PVC_SIZE_Gi:10

Flags:
      --dry-run           dry run
  -h, --help              help for create
  -t, --template string   template name
      --vars string       template vars. the format is VarName:VarValue. also it can be set multiple vars by conma separated list. (example: VAR1:VAL1,VAR2:VAL2)

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [create] ❌ fail with invalid args: workspace create ws1 --namespace xxxx --template template1 1']
SnapShot = """
Error: invalid options: namespace xxxx is not cosmo user's namespace
Usage:
  cosmoctl workspace create WORKSPACE_NAME --template TEMPLATE_NAME [flags]

Examples:
create my-code-server --user example-user --template code-server --vars PVC_SIZE_Gi:10

Flags:
      --dry-run           dry run
  -h, --help              help for create
  -t, --template string   template name
      --vars string       template vars. the format is VarName:VarValue. also it can be set multiple vars by conma separated list. (example: VAR1:VAL1,VAR2:VAL2)

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [create] ❌ fail with invalid args: workspace create ws1 --user --template template1 1']
SnapShot = """
Error: validation error: --template is required
Usage:
  cosmoctl workspace create WORKSPACE_NAME --template TEMPLATE_NAME [flags]

Examples:
create my-code-server --user example-user --template code-server --vars PVC_SIZE_Gi:10

Flags:
      --dry-run           dry run
  -h, --help              help for create
  -t, --template string   template name
      --vars string       template vars. the format is VarName:VarValue. also it can be set multiple vars by conma separated list. (example: VAR1:VAL1,VAR2:VAL2)

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [create] ❌ fail with invalid args: workspace create ws1 --user user1 --namespace user1 --template template1 1']
SnapShot = """
Error: validation error: --user and --namespace connot be used at the same time
Usage:
  cosmoctl workspace create WORKSPACE_NAME --template TEMPLATE_NAME [flags]

Examples:
create my-code-server --user example-user --template code-server --vars PVC_SIZE_Gi:10

Flags:
      --dry-run           dry run
  -h, --help              help for create
  -t, --template string   template name
      --vars string       template vars. the format is VarName:VarValue. also it can be set multiple vars by conma separated list. (example: VAR1:VAL1,VAR2:VAL2)

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [create] ❌ fail with invalid args: workspace create ws1 --user user1 --template 1']
SnapShot = """
Error: flag needs an argument: --template
Usage:
  cosmoctl workspace create WORKSPACE_NAME --template TEMPLATE_NAME [flags]

Examples:
create my-code-server --user example-user --template code-server --vars PVC_SIZE_Gi:10

Flags:
      --dry-run           dry run
  -h, --help              help for create
  -t, --template string   template name
      --vars string       template vars. the format is VarName:VarValue. also it can be set multiple vars by conma separated list. (example: VAR1:VAL1,VAR2:VAL2)

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [create] ❌ fail with invalid args: workspace create ws1 --user user1 --template template1 --all-namespaces 1']
SnapShot = """
Error: validation error: --all-namespaces is not supported in this command
Usage:
  cosmoctl workspace create WORKSPACE_NAME --template TEMPLATE_NAME [flags]

Examples:
create my-code-server --user example-user --template code-server --vars PVC_SIZE_Gi:10

Flags:
      --dry-run           dry run
  -h, --help              help for create
  -t, --template string   template name
      --vars string       template vars. the format is VarName:VarValue. also it can be set multiple vars by conma separated list. (example: VAR1:VAL1,VAR2:VAL2)

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [create] ❌ fail with invalid args: workspace create ws1 --user user1 --template template1 --vars HOGE 1']
SnapShot = """
Error: invalid options: vars format error: vars HOGE must be 'VAR:VAL'
Usage:
  cosmoctl workspace create WORKSPACE_NAME --template TEMPLATE_NAME [flags]

Examples:
create my-code-server --user example-user --template code-server --vars PVC_SIZE_Gi:10

Flags:
      --dry-run           dry run
  -h, --help              help for create
  -t, --template string   template name
      --vars string       template vars. the format is VarName:VarValue. also it can be set multiple vars by conma separated list. (example: VAR1:VAL1,VAR2:VAL2)

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [create] ❌ fail with invalid args: workspace create ws1 --user xxxxx --template template1 --dry-run 1']
SnapShot = """
Error: user is not found: users.cosmo-workspace.github.io \"xxxxx\" not found
Usage:
  cosmoctl workspace create WORKSPACE_NAME --template TEMPLATE_NAME [flags]

Examples:
create my-code-server --user example-user --template code-server --vars PVC_SIZE_Gi:10

Flags:
      --dry-run           dry run
  -h, --help              help for create
  -t, --template string   template name
      --vars string       template vars. the format is VarName:VarValue. also it can be set multiple vars by conma separated list. (example: VAR1:VAL1,VAR2:VAL2)

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [create] ❌ fail with invalid args: workspace create ws1 --user xxxxx --template template1 1']
SnapShot = """
Error: user is not found: users.cosmo-workspace.github.io \"xxxxx\" not found
Usage:
  cosmoctl workspace create WORKSPACE_NAME --template TEMPLATE_NAME [flags]

Examples:
create my-code-server --user example-user --template code-server --vars PVC_SIZE_Gi:10

Flags:
      --dry-run           dry run
  -h, --help              help for create
  -t, --template string   template name
      --vars string       template vars. the format is VarName:VarValue. also it can be set multiple vars by conma separated list. (example: VAR1:VAL1,VAR2:VAL2)

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [delete] ✅ success in normal context: workspace delete ws2 --namespace cosmo-user-user1 1']
SnapShot = """
\u001B[32mSuccessfully deleted workspace ws2
\u001B[0m"""

['cosmoctl [workspace] [delete] ✅ success in normal context: workspace delete ws2 --namespace cosmo-user-user1 2']
SnapShot = 'success'

['cosmoctl [workspace] [delete] ✅ success in normal context: workspace delete ws2 --user user1 1']
SnapShot = """
\u001B[32mSuccessfully deleted workspace ws2
\u001B[0m"""

['cosmoctl [workspace] [delete] ✅ success in normal context: workspace delete ws2 --user user1 2']
SnapShot = 'success'

['cosmoctl [workspace] [delete] ✅ success with dry-run: workspace delete ws2 --dry-run --namespace cosmo-user-user1 1']
SnapShot = """
\u001B[32mSuccessfully deleted workspace ws2 (dry-run)
\u001B[0m"""

['cosmoctl [workspace] [delete] ✅ success with dry-run: workspace delete ws2 --dry-run --namespace cosmo-user-user1 2']
SnapShot = 'success'

['cosmoctl [workspace] [delete] ✅ success with dry-run: workspace delete ws2 --dry-run --user user1 1']
SnapShot = """
\u001B[32mSuccessfully deleted workspace ws2 (dry-run)
\u001B[0m"""

['cosmoctl [workspace] [delete] ✅ success with dry-run: workspace delete ws2 --dry-run --user user1 2']
SnapShot = 'success'

['cosmoctl [workspace] [delete] ❌ fail with an unexpected error at delete: workspace delete ws1 --dry-run --user user1 1']
SnapShot = """
Error: failed to delete workspace: mock delete error
Usage:
  cosmoctl workspace delete WORKSPACE_NAME [flags]

Aliases:
  delete, del

Flags:
      --dry-run   dry run
  -h, --help      help for delete

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [delete] ❌ fail with an unexpected error at delete: workspace delete ws1 --dry-run --user user1 2']
SnapShot = 'failed to delete workspace: mock delete error'

['cosmoctl [workspace] [delete] ❌ fail with an unexpected error at delete: workspace delete ws1 --user user1 1']
SnapShot = """
Error: failed to delete workspace: mock delete error
Usage:
  cosmoctl workspace delete WORKSPACE_NAME [flags]

Aliases:
  delete, del

Flags:
      --dry-run   dry run
  -h, --help      help for delete

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [delete] ❌ fail with an unexpected error at delete: workspace delete ws1 --user user1 2']
SnapShot = 'failed to delete workspace: mock delete error'

['cosmoctl [workspace] [delete] ❌ fail with invalid args: workspace delete 1']
SnapShot = """
Error: validation error: invalid args
Usage:
  cosmoctl workspace delete WORKSPACE_NAME [flags]

Aliases:
  delete, del

Flags:
      --dry-run   dry run
  -h, --help      help for delete

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [delete] ❌ fail with invalid args: workspace delete 2']
SnapShot = 'validation error: invalid args'

['cosmoctl [workspace] [delete] ❌ fail with invalid args: workspace delete ws1 --namespace cosmo-user-user1 --user user1 1']
SnapShot = """
Error: validation error: --user and --namespace connot be used at the same time
Usage:
  cosmoctl workspace delete WORKSPACE_NAME [flags]

Aliases:
  delete, del

Flags:
      --dry-run   dry run
  -h, --help      help for delete

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [delete] ❌ fail with invalid args: workspace delete ws1 --namespace cosmo-user-user1 --user user1 2']
SnapShot = 'validation error: --user and --namespace connot be used at the same time'

['cosmoctl [workspace] [delete] ❌ fail with invalid args: workspace delete ws1 --namespace xxxx 1']
SnapShot = """
Error: invalid options: namespace xxxx is not cosmo user's namespace
Usage:
  cosmoctl workspace delete WORKSPACE_NAME [flags]

Aliases:
  delete, del

Flags:
      --dry-run   dry run
  -h, --help      help for delete

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [delete] ❌ fail with invalid args: workspace delete ws1 --namespace xxxx 2']
SnapShot = """
invalid options: namespace xxxx is not cosmo user's namespace"""

['cosmoctl [workspace] [delete] ❌ fail with invalid args: workspace delete ws1 --user user1 -A 1']
SnapShot = """
Error: validation error: --all-namespaces is not supported in this command
Usage:
  cosmoctl workspace delete WORKSPACE_NAME [flags]

Aliases:
  delete, del

Flags:
      --dry-run   dry run
  -h, --help      help for delete

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [delete] ❌ fail with invalid args: workspace delete ws1 --user user1 -A 2']
SnapShot = 'validation error: --all-namespaces is not supported in this command'

['cosmoctl [workspace] [delete] ❌ fail with invalid args: workspace delete ws1 --user user1 xxx 1']
SnapShot = """
Error: workspace is not found: workspaces.cosmo-workspace.github.io \"ws1\" not found
Usage:
  cosmoctl workspace delete WORKSPACE_NAME [flags]

Aliases:
  delete, del

Flags:
      --dry-run   dry run
  -h, --help      help for delete

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [delete] ❌ fail with invalid args: workspace delete ws1 --user user1 xxx 2']
SnapShot = 'workspace is not found: workspaces.cosmo-workspace.github.io "ws1" not found'

['cosmoctl [workspace] [delete] ❌ fail with invalid args: workspace delete xxxx --user user1 -A 1']
SnapShot = """
Error: validation error: --all-namespaces is not supported in this command
Usage:
  cosmoctl workspace delete WORKSPACE_NAME [flags]

Aliases:
  delete, del

Flags:
      --dry-run   dry run
  -h, --help      help for delete

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [delete] ❌ fail with invalid args: workspace delete xxxx --user user1 -A 2']
SnapShot = 'validation error: --all-namespaces is not supported in this command'

['cosmoctl [workspace] [get] ✅ success in normal context: workspace get --namespace cosmo-user-user1 1']
SnapShot = """
USER-NAMESPACE     NAME   TEMPLATE    POD-PHASE
cosmo-user-user1   ws1    template1   Pending
cosmo-user-user1   ws2    template1   Pending
"""

['cosmoctl [workspace] [get] ✅ success in normal context: workspace get --namespace cosmo-user-user1 ws2 1']
SnapShot = """
USER-NAMESPACE     NAME   TEMPLATE    POD-PHASE
cosmo-user-user1   ws2    template1   Pending
"""

['cosmoctl [workspace] [get] ✅ success in normal context: workspace get --user user1 1']
SnapShot = """
USER-NAMESPACE     NAME   TEMPLATE    POD-PHASE
cosmo-user-user1   ws1    template1   Pending
cosmo-user-user1   ws2    template1   Pending
"""

['cosmoctl [workspace] [get] ✅ success in normal context: workspace get --user user1 ws2 1']
SnapShot = """
USER-NAMESPACE     NAME   TEMPLATE    POD-PHASE
cosmo-user-user1   ws2    template1   Pending
"""

['cosmoctl [workspace] [get] ✅ success in normal context: workspace get -A --network -o wide 1']
SnapShot = """
USER-NAMESPACE     WORKSPACE-NAME   PORT    URL
cosmo-user-user1   ws1              18080   
cosmo-user-user1   ws2              18080   
cosmo-user-user1   ws2              1111    
cosmo-user-user1   ws2              2222    
"""

['cosmoctl [workspace] [get] ✅ success in normal context: workspace get -A --network -o yaml 1']
SnapShot = """
apiVersion: cosmo-workspace.github.io/v1alpha1
kind: Workspace
metadata:
  creationTimestamp: xxxxxxxx
  generation: 1
  name: ws1
  namespace: cosmo-user-user1
  resourceVersion: xxxxxxxx
  uid: xxxxxxxx
spec:
  network:
  - customHostPrefix: main
    httpPath: /
    portNumber: 18080
    protocol: http
    public: false
  replicas: 1
  template:
    name: template1
status:
  config:
    mainServicePortName: main
    serviceName: workspace
  instance: {}
  phase: Pending
---
apiVersion: cosmo-workspace.github.io/v1alpha1
kind: Workspace
metadata:
  creationTimestamp: xxxxxxxx
  generation: 3
  name: ws2
  namespace: cosmo-user-user1
  resourceVersion: xxxxxxxx
  uid: xxxxxxxx
spec:
  network:
  - customHostPrefix: main
    httpPath: /
    portNumber: 18080
    protocol: http
    public: false
  - customHostPrefix: nw1
    httpPath: /
    portNumber: 1111
    protocol: http
    public: false
  - customHostPrefix: nw3
    httpPath: /
    portNumber: 2222
    protocol: http
    public: false
  replicas: 1
  template:
    name: template1
status:
  config:
    mainServicePortName: main
    serviceName: workspace
  instance: {}
  phase: Pending
---

"""

['cosmoctl [workspace] [get] ✅ success in normal context: workspace get -A --network 1']
SnapShot = """
USER-NAMESPACE     WORKSPACE-NAME   PORT    URL
cosmo-user-user1   ws1              18080   
cosmo-user-user1   ws2              18080   
cosmo-user-user1   ws2              1111    
cosmo-user-user1   ws2              2222    
"""

['cosmoctl [workspace] [get] ✅ success in normal context: workspace get -A -o wide 1']
SnapShot = """
USER-NAMESPACE     NAME   TEMPLATE    POD-PHASE   URLS
cosmo-user-user1   ws1    template1   Pending     map[]
cosmo-user-user1   ws2    template1   Pending     map[]
"""

['cosmoctl [workspace] [get] ✅ success in normal context: workspace get -A -o yaml 1']
SnapShot = """
apiVersion: cosmo-workspace.github.io/v1alpha1
kind: Workspace
metadata:
  creationTimestamp: xxxxxxxx
  generation: 1
  name: ws1
  namespace: cosmo-user-user1
  resourceVersion: xxxxxxxx
  uid: xxxxxxxx
spec:
  network:
  - customHostPrefix: main
    httpPath: /
    portNumber: 18080
    protocol: http
    public: false
  replicas: 1
  template:
    name: template1
status:
  config:
    mainServicePortName: main
    serviceName: workspace
  instance: {}
  phase: Pending
---
apiVersion: cosmo-workspace.github.io/v1alpha1
kind: Workspace
metadata:
  creationTimestamp: xxxxxxxx
  generation: 3
  name: ws2
  namespace: cosmo-user-user1
  resourceVersion: xxxxxxxx
  uid: xxxxxxxx
spec:
  network:
  - customHostPrefix: main
    httpPath: /
    portNumber: 18080
    protocol: http
    public: false
  - customHostPrefix: nw1
    httpPath: /
    portNumber: 1111
    protocol: http
    public: false
  - customHostPrefix: nw3
    httpPath: /
    portNumber: 2222
    protocol: http
    public: false
  replicas: 1
  template:
    name: template1
status:
  config:
    mainServicePortName: main
    serviceName: workspace
  instance: {}
  phase: Pending
---

"""

['cosmoctl [workspace] [get] ✅ success in normal context: workspace get -A 1']
SnapShot = """
USER-NAMESPACE     NAME   TEMPLATE    POD-PHASE
cosmo-user-user1   ws1    template1   Pending
cosmo-user-user1   ws2    template1   Pending
"""

['cosmoctl [workspace] [get] ✅ success when workspace is empty: workspace get --all-namespaces 1']
SnapShot = """
USER-NAMESPACE   NAME   TEMPLATE   POD-PHASE
"""

['cosmoctl [workspace] [get] ✅ success when workspace is empty: workspace get --namespace cosmo-user-user1 1']
SnapShot = """
USER-NAMESPACE   NAME   TEMPLATE   POD-PHASE
"""

['cosmoctl [workspace] [get] ✅ success when workspace is empty: workspace get --user user1 1']
SnapShot = """
USER-NAMESPACE   NAME   TEMPLATE   POD-PHASE
"""

['cosmoctl [workspace] [get] ✅ success when workspace is empty: workspace get -A --network -o wide 1']
SnapShot = """
USER-NAMESPACE   WORKSPACE-NAME   PORT   URL
"""

['cosmoctl [workspace] [get] ✅ success when workspace is empty: workspace get -A --network -o yaml 1']
SnapShot = """

"""

['cosmoctl [workspace] [get] ✅ success when workspace is empty: workspace get -A --network 1']
SnapShot = """
USER-NAMESPACE   WORKSPACE-NAME   PORT   URL
"""

['cosmoctl [workspace] [get] ✅ success when workspace is empty: workspace get -A -o wide 1']
SnapShot = """
USER-NAMESPACE   NAME   TEMPLATE   POD-PHASE   URLS
"""

['cosmoctl [workspace] [get] ✅ success when workspace is empty: workspace get -A -o yaml 1']
SnapShot = """

"""

['cosmoctl [workspace] [get] ❌ fail with an unexpected error at list users: workspace get -A 1']
SnapShot = """
Error: failed to list users: mock listUsers error
Usage:
  cosmoctl workspace get [WORKSPACE_NAME] [flags]

Flags:
  -h, --help            help for get
      --network         show workspace network
  -o, --output string   output format. available: 'wide', 'yaml'

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [get] ❌ fail with an unexpected error at list workspace: workspace get --user user1 1']
SnapShot = """
Error: failed to list workspaces: mock listWorkspacesByUserName error
Usage:
  cosmoctl workspace get [WORKSPACE_NAME] [flags]

Flags:
  -h, --help            help for get
      --network         show workspace network
  -o, --output string   output format. available: 'wide', 'yaml'

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [get] ❌ fail with an unexpected error at list workspace: workspace get -A 1']
SnapShot = """
Error: failed to list workspaces: mock listWorkspacesByUserName error
Usage:
  cosmoctl workspace get [WORKSPACE_NAME] [flags]

Flags:
  -h, --help            help for get
      --network         show workspace network
  -o, --output string   output format. available: 'wide', 'yaml'

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [get] ❌ fail with invalid args: workspace get --namespace cosmo-user-user1 --user user1 1']
SnapShot = """
Error: validation error: --user and --namespace connot be used at the same time
Usage:
  cosmoctl workspace get [WORKSPACE_NAME] [flags]

Flags:
  -h, --help            help for get
      --network         show workspace network
  -o, --output string   output format. available: 'wide', 'yaml'

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [get] ❌ fail with invalid args: workspace get --namespace xxx 1']
SnapShot = """
Error: invalid options: namespace xxx is not cosmo user's namespace
Usage:
  cosmoctl workspace get [WORKSPACE_NAME] [flags]

Flags:
  -h, --help            help for get
      --network         show workspace network
  -o, --output string   output format. available: 'wide', 'yaml'

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [get] ❌ fail with invalid args: workspace get --user user1 xxx 1']
SnapShot = """
Error: workspace is not found: workspaces.cosmo-workspace.github.io \"xxx\" not found
Usage:
  cosmoctl workspace get [WORKSPACE_NAME] [flags]

Flags:
  -h, --help            help for get
      --network         show workspace network
  -o, --output string   output format. available: 'wide', 'yaml'

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [get] ❌ fail with invalid args: workspace get --user xxxx 1']
SnapShot = """
Error: user is not found: users.cosmo-workspace.github.io \"xxxx\" not found
Usage:
  cosmoctl workspace get [WORKSPACE_NAME] [flags]

Flags:
  -h, --help            help for get
      --network         show workspace network
  -o, --output string   output format. available: 'wide', 'yaml'

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [get] ❌ fail with invalid args: workspace get -A --user user1 1']
SnapShot = """
Error: validation error: --all-namespaces connot be used with --namespace or --user
Usage:
  cosmoctl workspace get [WORKSPACE_NAME] [flags]

Flags:
  -h, --help            help for get
      --network         show workspace network
  -o, --output string   output format. available: 'wide', 'yaml'

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [get] ❌ fail with invalid args: workspace get -A -o xxxx 1']
SnapShot = """
Error: validation error: invalid output format: available formats is ['wide', 'yaml']
Usage:
  cosmoctl workspace get [WORKSPACE_NAME] [flags]

Flags:
  -h, --help            help for get
      --network         show workspace network
  -o, --output string   output format. available: 'wide', 'yaml'

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [get] ❌ fail with invalid args: workspace get -A ws1 1']
SnapShot = """
Error: invalid options: --all-namespaces is not allowed to use if WORKSPACE_NAME specified
Usage:
  cosmoctl workspace get [WORKSPACE_NAME] [flags]

Flags:
  -h, --help            help for get
      --network         show workspace network
  -o, --output string   output format. available: 'wide', 'yaml'

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [run-instance] ✅ success in normal context: workspace run-instance ws1 --user user1 1']
SnapShot = """
\u001B[32mSuccessfully run workspace ws1
\u001B[0m"""

['cosmoctl [workspace] [run-instance] ✅ success in normal context: workspace run-instance ws1 --user user1 2']
SnapShot = 'success'

['cosmoctl [workspace] [run-instance] ✅ success in normal context: workspace run-instance ws1 --user user1 3']
SnapShot = """
{
  \"Name\": \"ws1\",
  \"Namespace\": \"cosmo-user-user1\",
  \"Spec\": {
    \"template\": {
      \"name\": \"template1\"
    },
    \"replicas\": 1,
    \"network\": [
      {
        \"protocol\": \"http\",
        \"portNumber\": 18080,
        \"customHostPrefix\": \"main\",
        \"httpPath\": \"/\",
        \"public\": false
      }
    ]
  },
  \"Status\": {
    \"instance\": {},
    \"phase\": \"Pending\",
    \"config\": {
      \"serviceName\": \"workspace\",
      \"mainServicePortName\": \"main\"
    }
  }
}
"""

['cosmoctl [workspace] [run-instance] ❌ fail with an unexpected error at update: workspace run-instance ws1 --user user1 1']
SnapShot = """
Error: failed to update workspace: mock update error
Usage:
  cosmoctl workspace run-instance WORKSPACE_NAME [flags]

Aliases:
  run-instance, run

Flags:
  -h, --help   help for run-instance

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [run-instance] ❌ fail with an unexpected error at update: workspace run-instance ws1 --user user1 2']
SnapShot = 'failed to update workspace: mock update error'

['cosmoctl [workspace] [run-instance] ❌ fail with invalid args: workspace run-instance 1']
SnapShot = """
Error: validation error: invalid args
Usage:
  cosmoctl workspace run-instance WORKSPACE_NAME [flags]

Aliases:
  run-instance, run

Flags:
  -h, --help   help for run-instance

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [run-instance] ❌ fail with invalid args: workspace run-instance 2']
SnapShot = 'validation error: invalid args'

['cosmoctl [workspace] [run-instance] ❌ fail with invalid args: workspace run-instance ws1 --namespace xxxxx 1']
SnapShot = """
Error: invalid options: namespace xxxxx is not cosmo user's namespace
Usage:
  cosmoctl workspace run-instance WORKSPACE_NAME [flags]

Aliases:
  run-instance, run

Flags:
  -h, --help   help for run-instance

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [run-instance] ❌ fail with invalid args: workspace run-instance ws1 --namespace xxxxx 2']
SnapShot = """
invalid options: namespace xxxxx is not cosmo user's namespace"""

['cosmoctl [workspace] [run-instance] ❌ fail with invalid args: workspace run-instance ws1 --user user1 --namespace cosmo-user-user1 1']
SnapShot = """
Error: validation error: --user and --namespace connot be used at the same time
Usage:
  cosmoctl workspace run-instance WORKSPACE_NAME [flags]

Aliases:
  run-instance, run

Flags:
  -h, --help   help for run-instance

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [run-instance] ❌ fail with invalid args: workspace run-instance ws1 --user user1 --namespace cosmo-user-user1 2']
SnapShot = 'validation error: --user and --namespace connot be used at the same time'

['cosmoctl [workspace] [run-instance] ❌ fail with invalid args: workspace run-instance ws1 --user user1 -A 1']
SnapShot = """
Error: validation error: --all-namespaces connot be used with --namespace or --user
Usage:
  cosmoctl workspace run-instance WORKSPACE_NAME [flags]

Aliases:
  run-instance, run

Flags:
  -h, --help   help for run-instance

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [run-instance] ❌ fail with invalid args: workspace run-instance ws1 --user user1 -A 2']
SnapShot = 'validation error: --all-namespaces connot be used with --namespace or --user'

['cosmoctl [workspace] [run-instance] ❌ fail with invalid args: workspace run-instance ws1 --user xxxxx 1']
SnapShot = """
Error: user is not found: users.cosmo-workspace.github.io \"xxxxx\" not found
Usage:
  cosmoctl workspace run-instance WORKSPACE_NAME [flags]

Aliases:
  run-instance, run

Flags:
  -h, --help   help for run-instance

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [run-instance] ❌ fail with invalid args: workspace run-instance ws1 --user xxxxx 2']
SnapShot = 'user is not found: users.cosmo-workspace.github.io "xxxxx" not found'

['cosmoctl [workspace] [run-instance] ❌ fail with invalid args: workspace run-instance ws2 --user user1 1']
SnapShot = """
Error: no change
Usage:
  cosmoctl workspace run-instance WORKSPACE_NAME [flags]

Aliases:
  run-instance, run

Flags:
  -h, --help   help for run-instance

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [run-instance] ❌ fail with invalid args: workspace run-instance ws2 --user user1 2']
SnapShot = 'no change'

['cosmoctl [workspace] [run-instance] ❌ fail with invalid args: workspace run-instance xxx --user user1 1']
SnapShot = """
Error: workspace is not found: workspaces.cosmo-workspace.github.io \"xxx\" not found
Usage:
  cosmoctl workspace run-instance WORKSPACE_NAME [flags]

Aliases:
  run-instance, run

Flags:
  -h, --help   help for run-instance

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [run-instance] ❌ fail with invalid args: workspace run-instance xxx --user user1 2']
SnapShot = 'workspace is not found: workspaces.cosmo-workspace.github.io "xxx" not found'

['cosmoctl [workspace] [stop-instance] ✅ success in normal context: workspace stop-instance ws1 --user user1 1']
SnapShot = """
\u001B[32mSuccessfully stopped workspace ws1
\u001B[0m"""

['cosmoctl [workspace] [stop-instance] ✅ success in normal context: workspace stop-instance ws1 --user user1 2']
SnapShot = 'success'

['cosmoctl [workspace] [stop-instance] ✅ success in normal context: workspace stop-instance ws1 --user user1 3']
SnapShot = """
{
  \"Name\": \"ws1\",
  \"Namespace\": \"cosmo-user-user1\",
  \"Spec\": {
    \"template\": {
      \"name\": \"template1\"
    },
    \"replicas\": 0,
    \"network\": [
      {
        \"protocol\": \"http\",
        \"portNumber\": 18080,
        \"customHostPrefix\": \"main\",
        \"httpPath\": \"/\",
        \"public\": false
      }
    ]
  },
  \"Status\": {
    \"instance\": {},
    \"phase\": \"Pending\",
    \"config\": {
      \"serviceName\": \"workspace\",
      \"mainServicePortName\": \"main\"
    }
  }
}
"""

['cosmoctl [workspace] [stop-instance] ❌ fail with an unexpected error at update: workspace stop-instance ws1 --user user1 1']
SnapShot = """
Error: failed to update workspace: mock update error
Usage:
  cosmoctl workspace stop-instance WORKSPACE_NAME [flags]

Aliases:
  stop-instance, stop

Flags:
  -h, --help   help for stop-instance

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [stop-instance] ❌ fail with an unexpected error at update: workspace stop-instance ws1 --user user1 2']
SnapShot = 'failed to update workspace: mock update error'

['cosmoctl [workspace] [stop-instance] ❌ fail with invalid args: workspace stop-instance 1']
SnapShot = """
Error: validation error: invalid args
Usage:
  cosmoctl workspace stop-instance WORKSPACE_NAME [flags]

Aliases:
  stop-instance, stop

Flags:
  -h, --help   help for stop-instance

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [stop-instance] ❌ fail with invalid args: workspace stop-instance 2']
SnapShot = 'validation error: invalid args'

['cosmoctl [workspace] [stop-instance] ❌ fail with invalid args: workspace stop-instance ws1 --namespace xxxxx 1']
SnapShot = """
Error: invalid options: namespace xxxxx is not cosmo user's namespace
Usage:
  cosmoctl workspace stop-instance WORKSPACE_NAME [flags]

Aliases:
  stop-instance, stop

Flags:
  -h, --help   help for stop-instance

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [stop-instance] ❌ fail with invalid args: workspace stop-instance ws1 --namespace xxxxx 2']
SnapShot = """
invalid options: namespace xxxxx is not cosmo user's namespace"""

['cosmoctl [workspace] [stop-instance] ❌ fail with invalid args: workspace stop-instance ws1 --user user1 --namespace cosmo-user-user1 1']
SnapShot = """
Error: validation error: --user and --namespace connot be used at the same time
Usage:
  cosmoctl workspace stop-instance WORKSPACE_NAME [flags]

Aliases:
  stop-instance, stop

Flags:
  -h, --help   help for stop-instance

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [stop-instance] ❌ fail with invalid args: workspace stop-instance ws1 --user user1 --namespace cosmo-user-user1 2']
SnapShot = 'validation error: --user and --namespace connot be used at the same time'

['cosmoctl [workspace] [stop-instance] ❌ fail with invalid args: workspace stop-instance ws1 --user user1 -A 1']
SnapShot = """
Error: validation error: --all-namespaces connot be used with --namespace or --user
Usage:
  cosmoctl workspace stop-instance WORKSPACE_NAME [flags]

Aliases:
  stop-instance, stop

Flags:
  -h, --help   help for stop-instance

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [stop-instance] ❌ fail with invalid args: workspace stop-instance ws1 --user user1 -A 2']
SnapShot = 'validation error: --all-namespaces connot be used with --namespace or --user'

['cosmoctl [workspace] [stop-instance] ❌ fail with invalid args: workspace stop-instance ws1 --user xxxxx 1']
SnapShot = """
Error: user is not found: users.cosmo-workspace.github.io \"xxxxx\" not found
Usage:
  cosmoctl workspace stop-instance WORKSPACE_NAME [flags]

Aliases:
  stop-instance, stop

Flags:
  -h, --help   help for stop-instance

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [stop-instance] ❌ fail with invalid args: workspace stop-instance ws1 --user xxxxx 2']
SnapShot = 'user is not found: users.cosmo-workspace.github.io "xxxxx" not found'

['cosmoctl [workspace] [stop-instance] ❌ fail with invalid args: workspace stop-instance ws2 --user user1 1']
SnapShot = """
Error: no change
Usage:
  cosmoctl workspace stop-instance WORKSPACE_NAME [flags]

Aliases:
  stop-instance, stop

Flags:
  -h, --help   help for stop-instance

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [stop-instance] ❌ fail with invalid args: workspace stop-instance ws2 --user user1 2']
SnapShot = 'no change'

['cosmoctl [workspace] [stop-instance] ❌ fail with invalid args: workspace stop-instance xxx --user user1 1']
SnapShot = """
Error: workspace is not found: workspaces.cosmo-workspace.github.io \"xxx\" not found
Usage:
  cosmoctl workspace stop-instance WORKSPACE_NAME [flags]

Aliases:
  stop-instance, stop

Flags:
  -h, --help   help for stop-instance

Global Flags:
  -A, --all-namespaces      all namespaces
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -n, --namespace string    namespace
  -u, --user string         user name
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [workspace] [stop-instance] ❌ fail with invalid args: workspace stop-instance xxx --user user1 2']
SnapShot = 'workspace is not found: workspaces.cosmo-workspace.github.io "xxx" not found'
