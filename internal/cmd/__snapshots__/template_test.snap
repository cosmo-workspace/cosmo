['cosmoctl [template] [generate] ✅ success in normal context: template generate --user-addon --set-default-user-addon --cluster-scope --disable-nameprefix 1']
SnapShot = """
# Generated by cosmoctl - cosmo vX.X.X cosmo-workspace 2023
apiVersion: cosmo-workspace.github.io/v1alpha1
kind: ClusterTemplate
metadata:
  annotations:
    cosmo-workspace.github.io/disable-nameprefix: \"true\"
    useraddon.cosmo-workspace.github.io/default: \"true\"
  creationTimestamp: null
  labels:
    cosmo-workspace.github.io/type: useraddon
  name: cmd
spec:
  rawYaml: |
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        cosmo-workspace.github.io/instance: '{{INSTANCE}}'
        cosmo-workspace.github.io/template: '{{TEMPLATE}}'
      name: workspace
      namespace: '{{NAMESPACE}}'
    spec:
      ports:
      - name: main
        port: 3000
        protocol: TCP
      selector:
        cosmo-workspace.github.io/instance: '{{INSTANCE}}'
        cosmo-workspace.github.io/template: '{{TEMPLATE}}'
      type: ClusterIP
    ---
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        cosmo-workspace.github.io/instance: '{{INSTANCE}}'
        cosmo-workspace.github.io/template: '{{TEMPLATE}}'
      name: workspace
      namespace: '{{NAMESPACE}}'
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        cosmo-workspace.github.io/instance: '{{INSTANCE}}'
        cosmo-workspace.github.io/template: '{{TEMPLATE}}'
      name: workspace
      namespace: '{{NAMESPACE}}'
    spec:
      replicas: 1
      selector:
        matchLabels:
          cosmo-workspace.github.io/instance: '{{INSTANCE}}'
          cosmo-workspace.github.io/template: '{{TEMPLATE}}'
      template:
        metadata:
          labels:
            cosmo-workspace.github.io/instance: '{{INSTANCE}}'
            cosmo-workspace.github.io/template: '{{TEMPLATE}}'
        spec:
          containers:
          - image: theiaide/theia
            imagePullPolicy: IfNotPresent
            name: theia
            ports:
            - containerPort: 3000
              name: http
              protocol: TCP
            volumeMounts:
            - mountPath: /home/project
              name: data
          serviceAccountName: default
          volumes:
          - emptyDir: {}
            name: data
    ---
    apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      labels:
        cosmo-workspace.github.io/instance: '{{INSTANCE}}'
        cosmo-workspace.github.io/template: '{{TEMPLATE}}'
      name: workspace
      namespace: '{{NAMESPACE}}'
    spec:
      rules:
      - host: main-{{INSTANCE}}-{{NAMESPACE}}.{{DOMAIN}}
        http:
          paths:
          - backend:
              service:
                name: workspace
                port:
                  name: main
            path: /*
            pathType: Exact

"""

['cosmoctl [template] [generate] ✅ success in normal context: template generate --user-addon --set-default-user-addon --cluster-scope --disable-nameprefix 2']
SnapShot = 'success'

['cosmoctl [template] [generate] ✅ success in normal context: template generate --user-addon --set-default-user-addon --disable-nameprefix 1']
SnapShot = """
# Generated by cosmoctl - cosmo vX.X.X cosmo-workspace 2023
apiVersion: cosmo-workspace.github.io/v1alpha1
kind: Template
metadata:
  annotations:
    cosmo-workspace.github.io/disable-nameprefix: \"true\"
    useraddon.cosmo-workspace.github.io/default: \"true\"
  creationTimestamp: null
  labels:
    cosmo-workspace.github.io/type: useraddon
  name: cmd
spec:
  rawYaml: |
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        cosmo-workspace.github.io/instance: '{{INSTANCE}}'
        cosmo-workspace.github.io/template: '{{TEMPLATE}}'
      name: workspace
      namespace: '{{NAMESPACE}}'
    spec:
      ports:
      - name: main
        port: 3000
        protocol: TCP
      selector:
        cosmo-workspace.github.io/instance: '{{INSTANCE}}'
        cosmo-workspace.github.io/template: '{{TEMPLATE}}'
      type: ClusterIP
    ---
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        cosmo-workspace.github.io/instance: '{{INSTANCE}}'
        cosmo-workspace.github.io/template: '{{TEMPLATE}}'
      name: workspace
      namespace: '{{NAMESPACE}}'
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        cosmo-workspace.github.io/instance: '{{INSTANCE}}'
        cosmo-workspace.github.io/template: '{{TEMPLATE}}'
      name: workspace
      namespace: '{{NAMESPACE}}'
    spec:
      replicas: 1
      selector:
        matchLabels:
          cosmo-workspace.github.io/instance: '{{INSTANCE}}'
          cosmo-workspace.github.io/template: '{{TEMPLATE}}'
      template:
        metadata:
          labels:
            cosmo-workspace.github.io/instance: '{{INSTANCE}}'
            cosmo-workspace.github.io/template: '{{TEMPLATE}}'
        spec:
          containers:
          - image: theiaide/theia
            imagePullPolicy: IfNotPresent
            name: theia
            ports:
            - containerPort: 3000
              name: http
              protocol: TCP
            volumeMounts:
            - mountPath: /home/project
              name: data
          serviceAccountName: default
          volumes:
          - emptyDir: {}
            name: data
    ---
    apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      labels:
        cosmo-workspace.github.io/instance: '{{INSTANCE}}'
        cosmo-workspace.github.io/template: '{{TEMPLATE}}'
      name: workspace
      namespace: '{{NAMESPACE}}'
    spec:
      rules:
      - host: main-{{INSTANCE}}-{{NAMESPACE}}.{{DOMAIN}}
        http:
          paths:
          - backend:
              service:
                name: workspace
                port:
                  name: main
            path: /*
            pathType: Exact

"""

['cosmoctl [template] [generate] ✅ success in normal context: template generate --user-addon --set-default-user-addon --disable-nameprefix 2']
SnapShot = 'success'

['cosmoctl [template] [generate] ✅ success in normal context: template generate --workspace --userroles teama-* --forbidden-userroles teama-operator,teama-testuser 1']
SnapShot = """
# Generated by cosmoctl - cosmo vX.X.X cosmo-workspace 2023
apiVersion: cosmo-workspace.github.io/v1alpha1
kind: Template
metadata:
  annotations:
    cosmo-workspace.github.io/forbidden-userroles: teama-operator,teama-testuser
    cosmo-workspace.github.io/userroles: teama-*
    workspace.cosmo-workspace.github.io/deployment: workspace
    workspace.cosmo-workspace.github.io/service: workspace
    workspace.cosmo-workspace.github.io/service-main-port: main
  creationTimestamp: null
  labels:
    cosmo-workspace.github.io/type: workspace
  name: cmd
spec:
  rawYaml: |
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        cosmo-workspace.github.io/instance: '{{INSTANCE}}'
        cosmo-workspace.github.io/template: '{{TEMPLATE}}'
      name: '{{INSTANCE}}-workspace'
      namespace: '{{NAMESPACE}}'
    spec:
      ports:
      - name: main
        port: 3000
        protocol: TCP
      selector:
        cosmo-workspace.github.io/instance: '{{INSTANCE}}'
        cosmo-workspace.github.io/template: '{{TEMPLATE}}'
      type: ClusterIP
    ---
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        cosmo-workspace.github.io/instance: '{{INSTANCE}}'
        cosmo-workspace.github.io/template: '{{TEMPLATE}}'
      name: '{{INSTANCE}}-workspace'
      namespace: '{{NAMESPACE}}'
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        cosmo-workspace.github.io/instance: '{{INSTANCE}}'
        cosmo-workspace.github.io/template: '{{TEMPLATE}}'
      name: '{{INSTANCE}}-workspace'
      namespace: '{{NAMESPACE}}'
    spec:
      replicas: 1
      selector:
        matchLabels:
          cosmo-workspace.github.io/instance: '{{INSTANCE}}'
          cosmo-workspace.github.io/template: '{{TEMPLATE}}'
      template:
        metadata:
          labels:
            cosmo-workspace.github.io/instance: '{{INSTANCE}}'
            cosmo-workspace.github.io/template: '{{TEMPLATE}}'
        spec:
          containers:
          - image: theiaide/theia
            imagePullPolicy: IfNotPresent
            name: theia
            ports:
            - containerPort: 3000
              name: http
              protocol: TCP
            volumeMounts:
            - mountPath: /home/project
              name: data
          serviceAccountName: default
          volumes:
          - emptyDir: {}
            name: data
    ---
    apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      labels:
        cosmo-workspace.github.io/instance: '{{INSTANCE}}'
        cosmo-workspace.github.io/template: '{{TEMPLATE}}'
      name: '{{INSTANCE}}-workspace'
      namespace: '{{NAMESPACE}}'
    spec:
      rules:
      - host: main-{{INSTANCE}}-{{NAMESPACE}}.{{DOMAIN}}
        http:
          paths:
          - backend:
              service:
                name: '{{INSTANCE}}-workspace'
                port:
                  name: main
            path: /*
            pathType: Exact

"""

['cosmoctl [template] [generate] ✅ success in normal context: template generate --workspace --userroles teama-* --forbidden-userroles teama-operator,teama-testuser 2']
SnapShot = 'success'

['cosmoctl [template] [generate] ✅ success in normal context: template generate --workspace --workspace-main-service-port-name main --required-vars HOGE:HOGEHOGE,FUGA:FUGAFUGA 1']
SnapShot = """
# Generated by cosmoctl - cosmo vX.X.X cosmo-workspace 2023
apiVersion: cosmo-workspace.github.io/v1alpha1
kind: Template
metadata:
  annotations:
    workspace.cosmo-workspace.github.io/deployment: workspace
    workspace.cosmo-workspace.github.io/service: workspace
    workspace.cosmo-workspace.github.io/service-main-port: main
  creationTimestamp: null
  labels:
    cosmo-workspace.github.io/type: workspace
  name: cmd
spec:
  rawYaml: |
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        cosmo-workspace.github.io/instance: '{{INSTANCE}}'
        cosmo-workspace.github.io/template: '{{TEMPLATE}}'
      name: '{{INSTANCE}}-workspace'
      namespace: '{{NAMESPACE}}'
    spec:
      ports:
      - name: main
        port: 3000
        protocol: TCP
      selector:
        cosmo-workspace.github.io/instance: '{{INSTANCE}}'
        cosmo-workspace.github.io/template: '{{TEMPLATE}}'
      type: ClusterIP
    ---
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        cosmo-workspace.github.io/instance: '{{INSTANCE}}'
        cosmo-workspace.github.io/template: '{{TEMPLATE}}'
      name: '{{INSTANCE}}-workspace'
      namespace: '{{NAMESPACE}}'
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        cosmo-workspace.github.io/instance: '{{INSTANCE}}'
        cosmo-workspace.github.io/template: '{{TEMPLATE}}'
      name: '{{INSTANCE}}-workspace'
      namespace: '{{NAMESPACE}}'
    spec:
      replicas: 1
      selector:
        matchLabels:
          cosmo-workspace.github.io/instance: '{{INSTANCE}}'
          cosmo-workspace.github.io/template: '{{TEMPLATE}}'
      template:
        metadata:
          labels:
            cosmo-workspace.github.io/instance: '{{INSTANCE}}'
            cosmo-workspace.github.io/template: '{{TEMPLATE}}'
        spec:
          containers:
          - image: theiaide/theia
            imagePullPolicy: IfNotPresent
            name: theia
            ports:
            - containerPort: 3000
              name: http
              protocol: TCP
            volumeMounts:
            - mountPath: /home/project
              name: data
          serviceAccountName: default
          volumes:
          - emptyDir: {}
            name: data
    ---
    apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      labels:
        cosmo-workspace.github.io/instance: '{{INSTANCE}}'
        cosmo-workspace.github.io/template: '{{TEMPLATE}}'
      name: '{{INSTANCE}}-workspace'
      namespace: '{{NAMESPACE}}'
    spec:
      rules:
      - host: main-{{INSTANCE}}-{{NAMESPACE}}.{{DOMAIN}}
        http:
          paths:
          - backend:
              service:
                name: '{{INSTANCE}}-workspace'
                port:
                  name: main
            path: /*
            pathType: Exact
  requiredVars:
  - default: HOGEHOGE
    var: HOGE
  - default: FUGAFUGA
    var: FUGA

"""

['cosmoctl [template] [generate] ✅ success in normal context: template generate --workspace --workspace-main-service-port-name main --required-vars HOGE:HOGEHOGE,FUGA:FUGAFUGA 2']
SnapShot = 'success'

['cosmoctl [template] [generate] ✅ success in normal context: template generate --workspace --workspace-main-service-port-name main -o /tmp/test-cosmo-template 1']
SnapShot = ''

['cosmoctl [template] [generate] ✅ success in normal context: template generate --workspace --workspace-main-service-port-name main -o /tmp/test-cosmo-template 2']
SnapShot = 'success'

['cosmoctl [template] [generate] ❌ fail with invalid args: template generate --workspace --user-addon --workspace-main-service-port-name main 1']
SnapShot = """
Error: validation error: --workspace and --user-addon cannot be specified concurrently
Usage:
  cosmoctl template generate --name TEMPLATE_NAME [< Input via Stdin or pipe] [flags]

Aliases:
  generate, gen

Flags:
      --cluster-scope                             generate ClusterTemplate (default generate namespaced Template)
      --desc string                               template description
      --disable-nameprefix                        disable adding instance name prefix on child resource name
      --forbidden-userroles string                user roles NOT to show this template (e.g. 'teama-*', 'teamb-admin', etc.)
  -h, --help                                      help for generate
  -n, --name string                               template name (use directory name if not specified)
  -o, --output string                             write output into file (default: Stdout)
      --required-vars string                      template custom vars to be replaced by instance. format --required-vars VAR1,VAR2:default-value
      --set-default-user-addon                    set default user addon
      --user-addon                                template as type useraddon
      --useraddon                                 template as type useraddon
      --userroles string                          user roles to show this template (e.g. 'teama-*', 'teamb-admin', etc.)
      --workspace                                 template as type workspace
      --workspace-deployment-name string          Deployment name for Workspace. use with --workspace (auto detected if not specified)
      --workspace-main-service-port-name string   ServicePort name for Workspace main container port. use with --workspace (auto detected if not specified)
      --workspace-service-name string             Service name for Workspace. use with --workspace (auto detected if not specified)

Global Flags:
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [template] [generate] ❌ fail with invalid args: template generate --workspace --user-addon --workspace-main-service-port-name main 2']
SnapShot = 'validation error: --workspace and --user-addon cannot be specified concurrently'

['cosmoctl [template] [get] ✅ success in normal context: template get --workspace 1']
SnapShot = """
NAME        REQUIRED-VARS       DEPLOYMENT/SERVICE
template1   {{HOGE}},{{FUGA}}   /workspace
template2   {{HOGE}},{{FUGA}}   /workspace
"""

['cosmoctl [template] [get] ✅ success in normal context: template get --workspace 2']
SnapShot = 'success'

['cosmoctl [template] [get] ✅ success in normal context: template get 1']
SnapShot = """
NAME                REQUIREDVARS        TYPE        ISCLUSTERSCOPE   FORROLE   FORBIDDENROLE
template1           {{HOGE}},{{FUGA}}   workspace   false                      
template2           {{HOGE}},{{FUGA}}   workspace   false                      
template3           {{HOGE}},{{FUGA}}   useraddon   false                      
cluster-template1   {{HOGE}},{{FUGA}}   useraddon   true                       
"""

['cosmoctl [template] [get] ✅ success in normal context: template get 2']
SnapShot = 'success'

['cosmoctl [template] [get] ✅ success in normal context: template get notfound 1']
SnapShot = """
NAME   REQUIREDVARS   TYPE   ISCLUSTERSCOPE   FORROLE   FORBIDDENROLE
"""

['cosmoctl [template] [get] ✅ success in normal context: template get notfound 2']
SnapShot = 'success'

['cosmoctl [template] [get] ✅ success in normal context: template get template2 --workspace 1']
SnapShot = """
NAME        REQUIRED-VARS       DEPLOYMENT/SERVICE
template2   {{HOGE}},{{FUGA}}   /workspace
"""

['cosmoctl [template] [get] ✅ success in normal context: template get template2 --workspace 2']
SnapShot = 'success'

['cosmoctl [template] [get] ✅ success in normal context: template get template2 1']
SnapShot = """
NAME        REQUIREDVARS        TYPE        ISCLUSTERSCOPE   FORROLE   FORBIDDENROLE
template2   {{HOGE}},{{FUGA}}   workspace   false                      
"""

['cosmoctl [template] [get] ✅ success in normal context: template get template2 2']
SnapShot = 'success'

['cosmoctl [template] [get] ✅ success in normal context: template get template2 cluster-template1 notfound 1']
SnapShot = """
NAME                REQUIREDVARS        TYPE        ISCLUSTERSCOPE   FORROLE   FORBIDDENROLE
template2           {{HOGE}},{{FUGA}}   workspace   false                      
cluster-template1   {{HOGE}},{{FUGA}}   useraddon   true                       
"""

['cosmoctl [template] [get] ✅ success in normal context: template get template2 cluster-template1 notfound 2']
SnapShot = 'success'

['cosmoctl [template] [get] ✅ success in normal context: template get template2 template3 1']
SnapShot = """
NAME        REQUIREDVARS        TYPE        ISCLUSTERSCOPE   FORROLE   FORBIDDENROLE
template2   {{HOGE}},{{FUGA}}   workspace   false                      
template3   {{HOGE}},{{FUGA}}   useraddon   false                      
"""

['cosmoctl [template] [get] ✅ success in normal context: template get template2 template3 2']
SnapShot = 'success'

['cosmoctl [template] [get] ❌ fail with an unexpected error at list users: template get --workspace 1']
SnapShot = """
Error: mock list error
Usage:
  cosmoctl template get [flags]

Flags:
  -h, --help        help for get
      --workspace   show type workspace template

Global Flags:
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [template] [get] ❌ fail with an unexpected error at list users: template get --workspace 2']
SnapShot = 'mock list error'

['cosmoctl [template] [get] ❌ fail with an unexpected error at list users: template get 1']
SnapShot = """
Error: mock list error
Usage:
  cosmoctl template get [flags]

Flags:
  -h, --help        help for get
      --workspace   show type workspace template

Global Flags:
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [template] [get] ❌ fail with an unexpected error at list users: template get 2']
SnapShot = 'mock list error'

['cosmoctl [template] [validate] ✅ success in normal context: template validate --file - --client -v 10 1']
SnapShot = """
APIVERSION                     KIND                    NAME                                               RESULT   MESSAGE
rbac.authorization.k8s.io/v1   RoleBinding             cosmoctl-validate-XXXXXXXX-cosmo-auth-proxy-role   OK       
v1                             Service                 cosmoctl-validate-XXXXXXXX-workspace               OK       
v1                             PersistentVolumeClaim   cosmoctl-validate-XXXXXXXX-workspace               OK       
apps/v1                        Deployment              cosmoctl-validate-XXXXXXXX-workspace               OK       
networking.k8s.io/v1           Ingress                 cosmoctl-validate-XXXXXXXX-workspace               OK       
"""

['cosmoctl [template] [validate] ✅ success in normal context: template validate --file - --client -v 10 2']
SnapShot = 'success'

['cosmoctl [template] [validate] ✅ success in normal context: template validate --file - 1']
SnapShot = """
APIVERSION                     KIND                    NAME                                               RESULT   MESSAGE
rbac.authorization.k8s.io/v1   RoleBinding             cosmoctl-validate-XXXXXXXX-cosmo-auth-proxy-role   OK       
v1                             Service                 cosmoctl-validate-XXXXXXXX-workspace               OK       
v1                             PersistentVolumeClaim   cosmoctl-validate-XXXXXXXX-workspace               OK       
apps/v1                        Deployment              cosmoctl-validate-XXXXXXXX-workspace               OK       
networking.k8s.io/v1           Ingress                 cosmoctl-validate-XXXXXXXX-workspace               NG       dryrun failed: Ingress.extensions \"cosmoctl-validate-XXXXXXXX-workspace\" is invalid: spec.rules[0].host: Invalid value: \"main-cosmoctl-validate-XXXXXXXX-default.{{DOMAIN}}\": a lowercase RFC 1123 subdomain must consist of lower case alphanumeric characters, '-' or '.', and must start and end with an alphanumeric character (e.g. 'example.com', regex used for validation is '[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*')
"""

['cosmoctl [template] [validate] ✅ success in normal context: template validate --file - 2']
SnapShot = 'success'

['cosmoctl [template] [validate] ✅ success in normal context: template validate --file /tmp/test-template.yaml --vars DOMAIN:example.com 1']
SnapShot = """
APIVERSION                     KIND                    NAME                                               RESULT   MESSAGE
rbac.authorization.k8s.io/v1   RoleBinding             cosmoctl-validate-XXXXXXXX-cosmo-auth-proxy-role   OK       
v1                             Service                 cosmoctl-validate-XXXXXXXX-workspace               OK       
v1                             PersistentVolumeClaim   cosmoctl-validate-XXXXXXXX-workspace               OK       
apps/v1                        Deployment              cosmoctl-validate-XXXXXXXX-workspace               OK       
networking.k8s.io/v1           Ingress                 cosmoctl-validate-XXXXXXXX-workspace               OK       
"""

['cosmoctl [template] [validate] ✅ success in normal context: template validate --file /tmp/test-template.yaml --vars DOMAIN:example.com 2']
SnapShot = 'success'

['cosmoctl [template] [validate] ❌ fail with invalid args: template validate --file - --vars HOGE 1']
SnapShot = """
Error: invalid options: vars format error: vars HOGE must be 'VAR:VAL'
Usage:
  cosmoctl template validate --file FILE [flags]

Aliases:
  validate, valid, check

Flags:
      --client        dry-run on client-side. kubectl is required to be executable in PATH
  -f, --file string   input COSMO Template file yaml path. when specified '-', input from Stdin
  -h, --help          help for validate
      --vars string   template vars. the format is VarName:VarValue. also it can be set multiple vars by conma separated list. (example: VAR1:VAL1,VAR2:VAL2)

Global Flags:
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [template] [validate] ❌ fail with invalid args: template validate --file - --vars HOGE 2']
SnapShot = """
invalid options: vars format error: vars HOGE must be 'VAR:VAL'"""

['cosmoctl [template] [validate] ❌ fail with invalid args: template validate --file /tmp/(xx*xx) 1']
SnapShot = """
Error: invalid options: failed to read input file: open /tmp/(xx*xx): no such file or directory
Usage:
  cosmoctl template validate --file FILE [flags]

Aliases:
  validate, valid, check

Flags:
      --client        dry-run on client-side. kubectl is required to be executable in PATH
  -f, --file string   input COSMO Template file yaml path. when specified '-', input from Stdin
  -h, --help          help for validate
      --vars string   template vars. the format is VarName:VarValue. also it can be set multiple vars by conma separated list. (example: VAR1:VAL1,VAR2:VAL2)

Global Flags:
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [template] [validate] ❌ fail with invalid args: template validate --file /tmp/(xx*xx) 2']
SnapShot = 'invalid options: failed to read input file: open /tmp/(xx*xx): no such file or directory'

['cosmoctl [template] [validate] ❌ fail with invalid args: template validate --file /tmp/test-empty-template.yaml 1']
SnapShot = """
Error: invalid options: no input
Usage:
  cosmoctl template validate --file FILE [flags]

Aliases:
  validate, valid, check

Flags:
      --client        dry-run on client-side. kubectl is required to be executable in PATH
  -f, --file string   input COSMO Template file yaml path. when specified '-', input from Stdin
  -h, --help          help for validate
      --vars string   template vars. the format is VarName:VarValue. also it can be set multiple vars by conma separated list. (example: VAR1:VAL1,VAR2:VAL2)

Global Flags:
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [template] [validate] ❌ fail with invalid args: template validate --file /tmp/test-empty-template.yaml 2']
SnapShot = 'invalid options: no input'

['cosmoctl [template] [validate] ❌ fail with invalid args: template validate --file /tmp/test-invalid-template.yaml 1']
SnapShot = """
Error: invalid options: failed to unmarshal yaml: error unmarshaling JSON: while decoding JSON: json: cannot unmarshal string into Go value of type v1alpha1.Template
Usage:
  cosmoctl template validate --file FILE [flags]

Aliases:
  validate, valid, check

Flags:
      --client        dry-run on client-side. kubectl is required to be executable in PATH
  -f, --file string   input COSMO Template file yaml path. when specified '-', input from Stdin
  -h, --help          help for validate
      --vars string   template vars. the format is VarName:VarValue. also it can be set multiple vars by conma separated list. (example: VAR1:VAL1,VAR2:VAL2)

Global Flags:
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [template] [validate] ❌ fail with invalid args: template validate --file /tmp/test-invalid-template.yaml 2']
SnapShot = 'invalid options: failed to unmarshal yaml: error unmarshaling JSON: while decoding JSON: json: cannot unmarshal string into Go value of type v1alpha1.Template'

['cosmoctl [template] [validate] ❌ fail with invalid args: template validate --file /tmp/test-user-addon-template.yaml 1']
SnapShot = """
Error: invalid options: required vars not given. set --var REQUIRED_VAR:<TEST_VAR>
Usage:
  cosmoctl template validate --file FILE [flags]

Aliases:
  validate, valid, check

Flags:
      --client        dry-run on client-side. kubectl is required to be executable in PATH
  -f, --file string   input COSMO Template file yaml path. when specified '-', input from Stdin
  -h, --help          help for validate
      --vars string   template vars. the format is VarName:VarValue. also it can be set multiple vars by conma separated list. (example: VAR1:VAL1,VAR2:VAL2)

Global Flags:
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [template] [validate] ❌ fail with invalid args: template validate --file /tmp/test-user-addon-template.yaml 2']
SnapShot = 'invalid options: required vars not given. set --var REQUIRED_VAR:<TEST_VAR>'

['cosmoctl [template] [validate] ❌ fail with invalid args: template validate --file 1']
SnapShot = """
Error: flag needs an argument: --file
Usage:
  cosmoctl template validate --file FILE [flags]

Aliases:
  validate, valid, check

Flags:
      --client        dry-run on client-side. kubectl is required to be executable in PATH
  -f, --file string   input COSMO Template file yaml path. when specified '-', input from Stdin
  -h, --help          help for validate
      --vars string   template vars. the format is VarName:VarValue. also it can be set multiple vars by conma separated list. (example: VAR1:VAL1,VAR2:VAL2)

Global Flags:
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [template] [validate] ❌ fail with invalid args: template validate --file 2']
SnapShot = 'flag needs an argument: --file'

['cosmoctl [template] [validate] ❌ fail with invalid args: template validate 1']
SnapShot = """
Error: validation error: --file is required
Usage:
  cosmoctl template validate --file FILE [flags]

Aliases:
  validate, valid, check

Flags:
      --client        dry-run on client-side. kubectl is required to be executable in PATH
  -f, --file string   input COSMO Template file yaml path. when specified '-', input from Stdin
  -h, --help          help for validate
      --vars string   template vars. the format is VarName:VarValue. also it can be set multiple vars by conma separated list. (example: VAR1:VAL1,VAR2:VAL2)

Global Flags:
      --context string      kube-context (default: current context)
      --kubeconfig string   kubeconfig file path (default: $HOME/.kube/config)
  -v, --verbose int         log level. -1:DISABLED, 0:INFO, 1:DEBUG, 2:ALL (default -1)

"""

['cosmoctl [template] [validate] ❌ fail with invalid args: template validate 2']
SnapShot = 'validation error: --file is required'
