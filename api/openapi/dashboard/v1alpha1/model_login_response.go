/*
 * Cosmo Dashboard API
 *
 * Manipulate cosmo dashboard resource API
 *
 * API version: v1alpha1
 * Contact: jlandowner8@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package v1alpha1

import (
	"time"
)

type LoginResponse struct {
	Id string `json:"id"`

	ExpireAt time.Time `json:"expireAt"`

	RequirePasswordUpdate bool `json:"requirePasswordUpdate,omitempty"`
}

// AssertLoginResponseRequired checks if the required fields are not zero-ed
func AssertLoginResponseRequired(obj LoginResponse) error {
	elements := map[string]interface{}{
		"id":       obj.Id,
		"expireAt": obj.ExpireAt,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseLoginResponseRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of LoginResponse (e.g. [][]LoginResponse), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseLoginResponseRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aLoginResponse, ok := obj.(LoginResponse)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertLoginResponseRequired(aLoginResponse)
	})
}
