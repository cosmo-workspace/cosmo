/*
 * Cosmo Dashboard API
 *
 * Manipulate cosmo dashboard resource API
 *
 * API version: v1alpha1
 * Contact: jlandowner8@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package v1alpha1

import (
	"time"
)

type VerifyResponse struct {
	Id string `json:"id"`

	ExpireAt time.Time `json:"expireAt"`

	RequirePasswordUpdate bool `json:"requirePasswordUpdate,omitempty"`
}

// AssertVerifyResponseRequired checks if the required fields are not zero-ed
func AssertVerifyResponseRequired(obj VerifyResponse) error {
	elements := map[string]interface{}{
		"id":       obj.Id,
		"expireAt": obj.ExpireAt,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseVerifyResponseRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of VerifyResponse (e.g. [][]VerifyResponse), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseVerifyResponseRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aVerifyResponse, ok := obj.(VerifyResponse)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertVerifyResponseRequired(aVerifyResponse)
	})
}
