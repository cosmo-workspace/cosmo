/*
 * Cosmo Dashboard API
 *
 * Manipulate cosmo dashboard resource API
 *
 * API version: v1alpha1
 * Contact: jlandowner8@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package v1alpha1

type CreateUserRequest struct {
	Id string `json:"id"`

	DisplayName string `json:"displayName,omitempty"`

	Role string `json:"role,omitempty"`

	AuthType string `json:"authType,omitempty"`

	Addons []ApiV1alpha1UserAddons `json:"addons,omitempty"`
}

// AssertCreateUserRequestRequired checks if the required fields are not zero-ed
func AssertCreateUserRequestRequired(obj CreateUserRequest) error {
	elements := map[string]interface{}{
		"id": obj.Id,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Addons {
		if err := AssertApiV1alpha1UserAddonsRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseCreateUserRequestRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of CreateUserRequest (e.g. [][]CreateUserRequest), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseCreateUserRequestRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aCreateUserRequest, ok := obj.(CreateUserRequest)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertCreateUserRequestRequired(aCreateUserRequest)
	})
}
