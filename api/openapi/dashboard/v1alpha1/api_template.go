/*
 * Cosmo Dashboard API
 *
 * Manipulate cosmo dashboard resource API
 *
 * API version: v1alpha1
 * Contact: jlandowner8@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package v1alpha1

import (
	"net/http"
	"strings"
)

// TemplateApiController binds http requests to an api service and writes the service results to the http response
type TemplateApiController struct {
	service      TemplateApiServicer
	errorHandler ErrorHandler
}

// TemplateApiOption for how the controller is set up.
type TemplateApiOption func(*TemplateApiController)

// WithTemplateApiErrorHandler inject ErrorHandler into controller
func WithTemplateApiErrorHandler(h ErrorHandler) TemplateApiOption {
	return func(c *TemplateApiController) {
		c.errorHandler = h
	}
}

// NewTemplateApiController creates a default api controller
func NewTemplateApiController(s TemplateApiServicer, opts ...TemplateApiOption) Router {
	controller := &TemplateApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the TemplateApiController
func (c *TemplateApiController) Routes() Routes {
	return Routes{
		{
			"GetWorkspaceTemplates",
			strings.ToUpper("Get"),
			"/api/v1alpha1/template/workspace",
			c.GetWorkspaceTemplates,
		},
	}
}

// GetWorkspaceTemplates - List workspace templates
func (c *TemplateApiController) GetWorkspaceTemplates(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetWorkspaceTemplates(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
