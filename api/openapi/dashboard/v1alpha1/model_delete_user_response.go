/*
 * Cosmo Dashboard API
 *
 * Manipulate cosmo dashboard resource API
 *
 * API version: v1alpha1
 * Contact: jlandowner8@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package v1alpha1

type DeleteUserResponse struct {
	Message string `json:"message"`

	User *User `json:"user"`
}

// AssertDeleteUserResponseRequired checks if the required fields are not zero-ed
func AssertDeleteUserResponseRequired(obj DeleteUserResponse) error {
	elements := map[string]interface{}{
		"message": obj.Message,
		"user":    obj.User,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if obj.User != nil {
		if err := AssertUserRequired(*obj.User); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseDeleteUserResponseRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of DeleteUserResponse (e.g. [][]DeleteUserResponse), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseDeleteUserResponseRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aDeleteUserResponse, ok := obj.(DeleteUserResponse)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertDeleteUserResponseRequired(aDeleteUserResponse)
	})
}
