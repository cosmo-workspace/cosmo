/*
 * Cosmo Dashboard API
 *
 * Manipulate cosmo dashboard resource API
 *
 * API version: v1alpha1
 * Contact: jlandowner8@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package v1alpha1

type UpsertNetworkRuleResponse struct {
	Message string `json:"message"`

	NetworkRule NetworkRule `json:"networkRule"`
}

// AssertUpsertNetworkRuleResponseRequired checks if the required fields are not zero-ed
func AssertUpsertNetworkRuleResponseRequired(obj UpsertNetworkRuleResponse) error {
	elements := map[string]interface{}{
		"message":     obj.Message,
		"networkRule": obj.NetworkRule,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertNetworkRuleRequired(obj.NetworkRule); err != nil {
		return err
	}
	return nil
}

// AssertRecurseUpsertNetworkRuleResponseRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of UpsertNetworkRuleResponse (e.g. [][]UpsertNetworkRuleResponse), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseUpsertNetworkRuleResponseRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aUpsertNetworkRuleResponse, ok := obj.(UpsertNetworkRuleResponse)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertUpsertNetworkRuleResponseRequired(aUpsertNetworkRuleResponse)
	})
}
