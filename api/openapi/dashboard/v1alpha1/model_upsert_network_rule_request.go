/*
 * Cosmo Dashboard API
 *
 * Manipulate cosmo dashboard resource API
 *
 * API version: v1alpha1
 * Contact: jlandowner8@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package v1alpha1

type UpsertNetworkRuleRequest struct {
	PortNumber int32 `json:"portNumber"`

	Group string `json:"group,omitempty"`

	HttpPath string `json:"httpPath,omitempty"`

	Public bool `json:"public,omitempty"`
}

// AssertUpsertNetworkRuleRequestRequired checks if the required fields are not zero-ed
func AssertUpsertNetworkRuleRequestRequired(obj UpsertNetworkRuleRequest) error {
	elements := map[string]interface{}{
		"portNumber": obj.PortNumber,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseUpsertNetworkRuleRequestRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of UpsertNetworkRuleRequest (e.g. [][]UpsertNetworkRuleRequest), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseUpsertNetworkRuleRequestRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aUpsertNetworkRuleRequest, ok := obj.(UpsertNetworkRuleRequest)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertUpsertNetworkRuleRequestRequired(aUpsertNetworkRuleRequest)
	})
}
