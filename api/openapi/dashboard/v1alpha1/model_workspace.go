/*
 * Cosmo Dashboard API
 *
 * Manipulate cosmo dashboard resource API
 *
 * API version: v1alpha1
 * Contact: jlandowner8@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package v1alpha1

type Workspace struct {
	Name string `json:"name"`

	OwnerID string `json:"ownerID,omitempty"`

	Spec WorkspaceSpec `json:"spec,omitempty"`

	Status WorkspaceStatus `json:"status,omitempty"`
}

// AssertWorkspaceRequired checks if the required fields are not zero-ed
func AssertWorkspaceRequired(obj Workspace) error {
	elements := map[string]interface{}{
		"name": obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertWorkspaceSpecRequired(obj.Spec); err != nil {
		return err
	}
	if err := AssertWorkspaceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertRecurseWorkspaceRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Workspace (e.g. [][]Workspace), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseWorkspaceRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aWorkspace, ok := obj.(Workspace)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertWorkspaceRequired(aWorkspace)
	})
}
