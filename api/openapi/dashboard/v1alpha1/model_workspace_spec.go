/*
 * Cosmo Dashboard API
 *
 * Manipulate cosmo dashboard resource API
 *
 * API version: v1alpha1
 * Contact: jlandowner8@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package v1alpha1

type WorkspaceSpec struct {
	Template string `json:"template"`

	Replicas int64 `json:"replicas"`

	Vars map[string]string `json:"vars,omitempty"`

	AdditionalNetwork []NetworkRule `json:"additionalNetwork,omitempty"`
}

// AssertWorkspaceSpecRequired checks if the required fields are not zero-ed
func AssertWorkspaceSpecRequired(obj WorkspaceSpec) error {
	elements := map[string]interface{}{
		"template": obj.Template,
		"replicas": obj.Replicas,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.AdditionalNetwork {
		if err := AssertNetworkRuleRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseWorkspaceSpecRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of WorkspaceSpec (e.g. [][]WorkspaceSpec), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseWorkspaceSpecRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aWorkspaceSpec, ok := obj.(WorkspaceSpec)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertWorkspaceSpecRequired(aWorkspaceSpec)
	})
}
