/*
 * Cosmo Dashboard API
 *
 * Manipulate cosmo dashboard resource API
 *
 * API version: v1alpha1
 * Contact: jlandowner8@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package v1alpha1

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// UserApiController binds http requests to an api service and writes the service results to the http response
type UserApiController struct {
	service      UserApiServicer
	errorHandler ErrorHandler
}

// UserApiOption for how the controller is set up.
type UserApiOption func(*UserApiController)

// WithUserApiErrorHandler inject ErrorHandler into controller
func WithUserApiErrorHandler(h ErrorHandler) UserApiOption {
	return func(c *UserApiController) {
		c.errorHandler = h
	}
}

// NewUserApiController creates a default api controller
func NewUserApiController(s UserApiServicer, opts ...UserApiOption) Router {
	controller := &UserApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the UserApiController
func (c *UserApiController) Routes() Routes {
	return Routes{
		{
			"DeleteUser",
			strings.ToUpper("Delete"),
			"/api/v1alpha1/user/{userid}",
			c.DeleteUser,
		},
		{
			"GetUser",
			strings.ToUpper("Get"),
			"/api/v1alpha1/user/{userid}",
			c.GetUser,
		},
		{
			"GetUsers",
			strings.ToUpper("Get"),
			"/api/v1alpha1/user",
			c.GetUsers,
		},
		{
			"PostUser",
			strings.ToUpper("Post"),
			"/api/v1alpha1/user",
			c.PostUser,
		},
		{
			"PutUserPassword",
			strings.ToUpper("Put"),
			"/api/v1alpha1/user/{userid}/password",
			c.PutUserPassword,
		},
		{
			"PutUserRole",
			strings.ToUpper("Put"),
			"/api/v1alpha1/user/{userid}/role",
			c.PutUserRole,
		},
	}
}

// DeleteUser - Delete user by ID.
func (c *UserApiController) DeleteUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userid := params["userid"]

	result, err := c.service.DeleteUser(r.Context(), userid)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetUser - Get user by ID.
func (c *UserApiController) GetUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userid := params["userid"]

	result, err := c.service.GetUser(r.Context(), userid)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetUsers - Get all users.
func (c *UserApiController) GetUsers(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetUsers(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PostUser - Create a new User
func (c *UserApiController) PostUser(w http.ResponseWriter, r *http.Request) {
	createUserRequest := CreateUserRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createUserRequest); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateUserRequestRequired(createUserRequest); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostUser(r.Context(), createUserRequest)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PutUserPassword - Update user password
func (c *UserApiController) PutUserPassword(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userid := params["userid"]

	updateUserPasswordRequest := UpdateUserPasswordRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateUserPasswordRequest); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateUserPasswordRequestRequired(updateUserPasswordRequest); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PutUserPassword(r.Context(), userid, updateUserPasswordRequest)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PutUserRole - Update user role
func (c *UserApiController) PutUserRole(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userid := params["userid"]

	updateUserRoleRequest := UpdateUserRoleRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateUserRoleRequest); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateUserRoleRequestRequired(updateUserRoleRequest); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PutUserRole(r.Context(), userid, updateUserRoleRequest)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
