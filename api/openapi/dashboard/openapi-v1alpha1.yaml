openapi: 3.0.3
info:
  title: Cosmo Dashboard API
  description: Manipulate cosmo dashboard resource API
  termsOfService: https://github.com/cosmo-workspace/cosmo/
  contact:
    name: Author
    url: https://github.com/jlandowner
    email: jlandowner8@gmail.com
  license:
    name: MIT
    url: https://github.com/cosmo-workspace/cosmo/blob/main/LICENSE
  version: v1alpha1
servers:
  - url: https://cosmo-dashboard.cosmo-system.svc.cluster.local:8443
    description: Dashboard server in Kubernetes cluster

#-------------------------------------------
# paths
#-------------------------------------------
paths:
  /api/v1alpha1/auth/login:
    post:
      tags:
        - auth
      operationId: login
      summary: Login
      description: Create session to login
      parameters: []
      requestBody:
        description: ID and password to login
        required: true
        content:
          application/json:
            schema:
              title: LoginRequest
              type: object
              required:
                - id
                - password
              properties:
                id:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Successfully new session created
          content:
            application/json:
              schema:
                title: LoginResponse
                type: object
                required:
                  - id
                  - expireAt
                properties:
                  id:
                    type: string
                  expireAt:
                    type: string
                    format: date-time
                  requirePasswordUpdate:
                    type: boolean
        "403": { $ref: "#/components/responses/403_Forbidden" }
        "500": { $ref: "#/components/responses/500_InternalServerError" }

  /api/v1alpha1/auth/verify:
    post:
      tags:
        - auth
      operationId: verify
      summary: Verify auth
      description: Verify authorization
      security:
        - cookieAuth: []
      parameters: []
      responses:
        "200":
          description: Session verified
          content:
            application/json:
              schema:
                title: VerifyResponse
                type: object
                required:
                  - id
                  - expireAt
                properties:
                  id:
                    type: string
                  expireAt:
                    type: string
                    format: date-time
                  requirePasswordUpdate:
                    type: boolean
        "401": { $ref: "#/components/responses/401_Unauthorized" }
        "500": { $ref: "#/components/responses/500_InternalServerError" }

  /api/v1alpha1/auth/logout:
    post:
      tags:
        - auth
      operationId: logout
      summary: Logout
      description: Delete session to logout
      security:
        - cookieAuth: []
      parameters: []
      responses:
        "200":
          description: Successfully logged out
        "401": { $ref: "#/components/responses/401_Unauthorized" }
        "500": { $ref: "#/components/responses/500_InternalServerError" }

  /api/v1alpha1/template/workspace:
    get:
      tags:
        - template
      operationId: getWorkspaceTemplates
      summary: List workspace templates
      description: List templates typed workspace
      security:
        - cookieAuth: []
      parameters: []
      responses:
        "200":
          description: A JSON array of Template model
          content:
            application/json:
              schema:
                title: ListTemplatesResponse
                type: object
                required:
                  - items
                properties:
                  message:
                    type: string
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Template"

        "401": { $ref: "#/components/responses/401_Unauthorized" }
        "500": { $ref: "#/components/responses/500_InternalServerError" }

  /api/v1alpha1/template/useraddon:
    get:
      tags:
        - template
      operationId: getUserAddonTemplates
      summary: List useraddon templates
      description: List templates typed useraddon
      security:
        - cookieAuth: []
      parameters: []
      responses:
        "200":
          description: A JSON array of Template model
          content:
            application/json:
              schema:
                title: ListTemplatesResponse
                type: object
                required:
                  - items
                properties:
                  message:
                    type: string
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Template"

        "401": { $ref: "#/components/responses/401_Unauthorized" }
        "500": { $ref: "#/components/responses/500_InternalServerError" }

  /api/v1alpha1/user:
    get:
      tags:
        - user
      operationId: getUsers
      summary: Get all users.
      description: Returns an array of User model
      security:
        - cookieAuth: []
      parameters: []
      responses:
        "200":
          description: A JSON array of User model
          content:
            application/json:
              schema:
                title: ListUsersResponse
                type: object
                required:
                  - items
                properties:
                  message:
                    type: string
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"

        "401": { $ref: "#/components/responses/401_Unauthorized" }
        "403": { $ref: "#/components/responses/403_Forbidden" }
        "500": { $ref: "#/components/responses/500_InternalServerError" }

    post:
      tags:
        - user
      operationId: postUser
      summary: Create a new User
      description: Create a new User
      security:
        - cookieAuth: []
      parameters: []
      requestBody:
        description: user to create
        required: true
        content:
          application/json:
            schema:
              title: CreateUserRequest
              type: object
              required:
                - id
              properties:
                id:
                  type: string
                displayName:
                  type: string
                role:
                  type: string
                authType:
                  type: string
                addons:
                  type: array
                  items:
                    type: object
                    required:
                      - template
                    properties:
                      template:
                        type: string
                      vars:
                        type: object
                        additionalProperties:
                          type: string

      responses:
        "201":
          description: Successfully user created
          content:
            application/json:
              schema:
                title: CreateUserResponse
                type: object
                required:
                  - message
                  - user
                properties:
                  message:
                    type: string
                  user:
                    $ref: "#/components/schemas/User"

        "400": { $ref: "#/components/responses/400_BadRequest" }
        "401": { $ref: "#/components/responses/401_Unauthorized" }
        "403": { $ref: "#/components/responses/403_Forbidden" }
        "429": { $ref: "#/components/responses/404_NotFound" }
        "500": { $ref: "#/components/responses/500_InternalServerError" }

  /api/v1alpha1/user/{userid}:
    get:
      tags:
        - user
      operationId: getUser
      summary: Get user by ID.
      description: Returns a single User model
      security:
        - cookieAuth: []
      parameters:
        - name: userid
          in: path
          description: user id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A single User model
          content:
            application/json:
              schema:
                title: GetUserResponse
                type: object
                required:
                  - user
                properties:
                  user:
                    $ref: "#/components/schemas/User"

        "401": { $ref: "#/components/responses/401_Unauthorized" }
        "403": { $ref: "#/components/responses/403_Forbidden" }
        "404": { $ref: "#/components/responses/404_NotFound" }
        "500": { $ref: "#/components/responses/500_InternalServerError" }

    delete:
      tags:
        - user
      operationId: deleteUser
      summary: Delete user by ID.
      description: Delete user by ID
      security:
        - cookieAuth: []
      parameters:
        - name: userid
          in: path
          description: user id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully user deleted
          content:
            application/json:
              schema:
                title: DeleteUserResponse
                type: object
                required:
                  - message
                  - user
                properties:
                  message:
                    type: string
                  user:
                    $ref: "#/components/schemas/User"

        "401": { $ref: "#/components/responses/401_Unauthorized" }
        "403": { $ref: "#/components/responses/403_Forbidden" }
        "404": { $ref: "#/components/responses/404_NotFound" }
        "500": { $ref: "#/components/responses/500_InternalServerError" }

  /api/v1alpha1/user/{userid}/name:
    put:
      tags:
        - user
      operationId: putUserName
      summary: Update user name
      description: Update user display name
      security:
        - cookieAuth: []
      parameters:
        - name: userid
          in: path
          description: user id
          required: true
          schema:
            type: string
      requestBody:
        description: name to update
        required: true
        content:
          application/json:
            schema:
              title: UpdateUserNameRequest
              type: object
              required:
                - displayName
              properties:
                displayName:
                  type: string
      responses:
        "200":
          description: Successfully user updated
          content:
            application/json:
              schema:
                title: UpdateUserNameResponse
                type: object
                required:
                  - message
                  - user
                properties:
                  message:
                    type: string
                  user:
                    $ref: "#/components/schemas/User"

        "401": { $ref: "#/components/responses/401_Unauthorized" }
        "403": { $ref: "#/components/responses/403_Forbidden" }
        "404": { $ref: "#/components/responses/404_NotFound" }
        "500": { $ref: "#/components/responses/500_InternalServerError" }

  /api/v1alpha1/user/{userid}/role:
    put:
      tags:
        - user
      operationId: putUserRole
      summary: Update user role
      description: Update a single User role
      security:
        - cookieAuth: []
      parameters:
        - name: userid
          in: path
          description: user id
          required: true
          schema:
            type: string
      requestBody:
        description: role to update
        required: true
        content:
          application/json:
            schema:
              title: UpdateUserRoleRequest
              type: object
              properties:
                role:
                  type: string
      responses:
        "200":
          description: Successfully user updated
          content:
            application/json:
              schema:
                title: UpdateUserRoleResponse
                type: object
                required:
                  - message
                  - user
                properties:
                  message:
                    type: string
                  user:
                    $ref: "#/components/schemas/User"

        "401": { $ref: "#/components/responses/401_Unauthorized" }
        "403": { $ref: "#/components/responses/403_Forbidden" }
        "404": { $ref: "#/components/responses/404_NotFound" }
        "500": { $ref: "#/components/responses/500_InternalServerError" }

  /api/v1alpha1/user/{userid}/password:
    put:
      tags:
        - user
      operationId: putUserPassword
      summary: Update user password
      description: Update a single User password
      security:
        - cookieAuth: []
      parameters:
        - name: userid
          in: path
          description: user id
          required: true
          schema:
            type: string
      requestBody:
        description: password to update
        required: true
        content:
          application/json:
            schema:
              title: UpdateUserPasswordRequest
              type: object
              required:
                - currentPassword
                - newPassword
              properties:
                currentPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        "200":
          description: Successfully password updated
          content:
            application/json:
              schema:
                title: UpdateUserPasswordResponse
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string

        "401": { $ref: "#/components/responses/401_Unauthorized" }
        "403": { $ref: "#/components/responses/403_Forbidden" }
        "404": { $ref: "#/components/responses/404_NotFound" }
        "500": { $ref: "#/components/responses/500_InternalServerError" }

  /api/v1alpha1/user/{userid}/workspace:
    get:
      tags:
        - workspace
      operationId: getWorkspaces
      summary: Get all workspace of user.
      description: Returns an array of Workspace model
      security:
        - cookieAuth: []
      parameters:
        - name: userid
          in: path
          description: user id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A JSON array of Workspace model
          content:
            application/json:
              schema:
                title: ListWorkspaceResponse
                type: object
                required:
                  - items
                properties:
                  message:
                    type: string
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Workspace"

        "401": { $ref: "#/components/responses/401_Unauthorized" }
        "403": { $ref: "#/components/responses/403_Forbidden" }
        "500": { $ref: "#/components/responses/500_InternalServerError" }

    post:
      tags:
        - workspace
      operationId: postWorkspace
      summary: Create a new Workspace
      description: Create a new Workspace
      security:
        - cookieAuth: []
      parameters:
        - name: userid
          in: path
          description: user id
          required: true
          schema:
            type: string
      requestBody:
        description: workspace to create
        required: true
        content:
          application/json:
            schema:
              title: CreateWorkspaceRequest
              type: object
              required:
                - name
                - template
              properties:
                name:
                  type: string
                template:
                  type: string
                vars:
                  type: object
                  additionalProperties:
                    type: string
      responses:
        "201":
          description: Successfully workspace created
          content:
            application/json:
              schema:
                title: CreateWorkspaceResponse
                type: object
                required:
                  - message
                  - workspace
                properties:
                  message:
                    type: string
                  workspace:
                    $ref: "#/components/schemas/Workspace"

        "401": { $ref: "#/components/responses/401_Unauthorized" }
        "403": { $ref: "#/components/responses/403_Forbidden" }
        "404": { $ref: "#/components/responses/404_NotFound" }
        "429": { $ref: "#/components/responses/404_NotFound" }
        "500": { $ref: "#/components/responses/500_InternalServerError" }

  /api/v1alpha1/user/{userid}/workspace/{wsName}:
    get:
      tags:
        - workspace
      operationId: getWorkspace
      summary: Get workspace by name.
      description: Returns a single Workspace model
      security:
        - cookieAuth: []
      parameters:
        - name: userid
          in: path
          description: user id
          required: true
          schema:
            type: string
        - name: wsName
          in: path
          description: workspace name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A single Workspace model
          content:
            application/json:
              schema:
                title: GetWorkspaceResponse
                type: object
                required:
                  - workspace
                properties:
                  workspace:
                    $ref: "#/components/schemas/Workspace"

        "401": { $ref: "#/components/responses/401_Unauthorized" }
        "403": { $ref: "#/components/responses/403_Forbidden" }
        "404": { $ref: "#/components/responses/404_NotFound" }
        "500": { $ref: "#/components/responses/500_InternalServerError" }

    delete:
      tags:
        - workspace
      operationId: deleteWorkspace
      summary: Delete workspace.
      description: Delete workspace
      security:
        - cookieAuth: []
      parameters:
        - name: userid
          in: path
          description: user id
          required: true
          schema:
            type: string
        - name: wsName
          in: path
          description: workspace name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully workspace deleted
          content:
            application/json:
              schema:
                title: DeleteWorkspaceResponse
                type: object
                required:
                  - message
                  - workspace
                properties:
                  message:
                    type: string
                  workspace:
                    $ref: "#/components/schemas/Workspace"

        "401": { $ref: "#/components/responses/401_Unauthorized" }
        "403": { $ref: "#/components/responses/403_Forbidden" }
        "404": { $ref: "#/components/responses/404_NotFound" }
        "500": { $ref: "#/components/responses/500_InternalServerError" }

    patch:
      tags:
        - workspace
      operationId: patchWorkspace
      summary: Update workspace.
      description: Update workspace
      security:
        - cookieAuth: []
      parameters:
        - name: userid
          in: path
          description: user id
          required: true
          schema:
            type: string
        - name: wsName
          in: path
          description: workspace name
          required: true
          schema:
            type: string
      requestBody:
        description: workspace to update
        required: true
        content:
          application/json:
            schema:
              title: PatchWorkspaceRequest
              type: object
              properties:
                replicas:
                  type: integer
                  format: int64
                  nullable: true
      responses:
        "200":
          description: Successfully workspace updated
          content:
            application/json:
              schema:
                title: PatchWorkspaceResponse
                type: object
                required:
                  - message
                  - workspace
                properties:
                  message:
                    type: string
                  workspace:
                    $ref: "#/components/schemas/Workspace"

        "401": { $ref: "#/components/responses/401_Unauthorized" }
        "403": { $ref: "#/components/responses/403_Forbidden" }
        "404": { $ref: "#/components/responses/404_NotFound" }
        "500": { $ref: "#/components/responses/500_InternalServerError" }

  /api/v1alpha1/user/{userid}/workspace/{wsName}/network/{networkRuleName}:
    put:
      tags:
        - workspace
      operationId: putNetworkRule
      summary: Upsert workspace network rule
      description: Upsert workspace network rule
      security:
        - cookieAuth: []
      parameters:
        - name: userid
          in: path
          description: user id
          required: true
          schema:
            type: string
        - name: wsName
          in: path
          description: workspace name
          required: true
          schema:
            type: string
        - name: networkRuleName
          in: path
          description: network rule name
          required: true
          schema:
            type: string
      requestBody:
        description: network rule to upsert
        required: true
        content:
          application/json:
            schema:
              title: UpsertNetworkRuleRequest
              type: object
              required:
                - portNumber
              properties:
                portNumber:
                  type: integer
                group:
                  type: string
                httpPath:
                  type: string
                public:
                  type: boolean

      responses:
        "200":
          description: Successfully network rule upserted
          content:
            application/json:
              schema:
                title: UpsertNetworkRuleResponse
                type: object
                required:
                  - message
                  - networkRule
                properties:
                  message:
                    type: string
                  networkRule:
                    $ref: "#/components/schemas/NetworkRule"

        "401": { $ref: "#/components/responses/401_Unauthorized" }
        "403": { $ref: "#/components/responses/403_Forbidden" }
        "500": { $ref: "#/components/responses/500_InternalServerError" }

    delete:
      tags:
        - workspace
      operationId: deleteNetworkRule
      summary: Remove workspace network rule
      description: Remove workspace network rule
      security:
        - cookieAuth: []
      parameters:
        - name: userid
          in: path
          description: user id
          required: true
          schema:
            type: string
        - name: wsName
          in: path
          description: workspace name
          required: true
          schema:
            type: string
        - name: networkRuleName
          in: path
          description: network rule name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully network rule removed
          content:
            application/json:
              schema:
                title: RemoveNetworkRuleResponse
                type: object
                required:
                  - message
                  - networkRule
                properties:
                  message:
                    type: string
                  networkRule:
                    $ref: "#/components/schemas/NetworkRule"

        "401": { $ref: "#/components/responses/401_Unauthorized" }
        "403": { $ref: "#/components/responses/403_Forbidden" }
        "404": { $ref: "#/components/responses/404_NotFound" }
        "500": { $ref: "#/components/responses/500_InternalServerError" }

#-------------------------------------------
# components
#-------------------------------------------
components:
  responses:
    400_BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    401_Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    403_Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    404_NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    429_TooManyRequests:
      description: Too many requests, or Already exist.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    500_InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    503_ServiceUnavailable:
      description: Service unavailable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: cosmo-dashboard

  schemas:
    ErrorResponse:
      type: object
      properties:
        message:
          type: string

    Template:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
        requiredVars:
          type: array
          items:
            type: object
            required:
              - varName
            properties:
              varName:
                type: string
              defaultValue:
                type: string
        isDefaultUserAddon:
          nullable: true
          type: boolean

    User:
      type: object
      nullable: true
      required:
        - id
      properties:
        id:
          type: string
        displayName:
          type: string
        role:
          type: string
          enum:
            - cosmo-admin
        authType:
          type: string
          enum:
            - kosmo-secret
        addons:
          type: array
          items:
            type: object
            required:
              - template
            properties:
              template:
                type: string
              vars:
                type: object
                additionalProperties:
                  type: string
        defaultPassword:
          type: string
        status:
          type: string

    Workspace:
      type: object
      nullable: true
      required:
        - name
      properties:
        name:
          type: string
        ownerID: # todo: require
          type: string
        spec: # todo: require
          $ref: "#/components/schemas/WorkspaceSpec"
        status: # todo: require
          $ref: "#/components/schemas/WorkspaceStatus"

    WorkspaceSpec:
      type: object
      required:
        - template
        - replicas
      properties:
        template:
          type: string
        replicas:
          type: integer
          format: int64
        vars:
          type: object
          additionalProperties:
            type: string
        additionalNetwork:
          type: array
          items:
            $ref: "#/components/schemas/NetworkRule"

    WorkspaceStatus:
      type: object
      required:
        - phase
      properties:
        phase:
          type: string
        mainUrl:
          type: string
        urlBase:
          type: string

    NetworkRule:
      type: object
      required:
        - portName
        - portNumber
        - public
      properties:
        portName:
          type: string
        portNumber:
          type: integer
        group:
          type: string
        httpPath:
          type: string
        url:
          type: string
        public:
          type: boolean
